<UserControl
	x:Class="AutomationModule.Views.ArgumentView"
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:automation="clr-namespace:FiresecAPI.Automation;assembly=FiresecAPI"
	xmlns:extToolkit="http://schemas.microsoft.com/winfx/2006/xaml/presentation/toolkit/extended"
	xmlns:p="clr-namespace:System.Windows.Controls.Primitives;assembly=PresentationFramework"
	xmlns:xc="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
	xmlns:lang="clr-namespace:Localization.Automation.Views;assembly=Localization">
    
	<UserControl.Resources>
		<ResourceDictionary>
			<ResourceDictionary.MergedDictionaries>
				<ResourceDictionary Source="..\..\Steps\Views\ProcedureResources.xaml" />
			</ResourceDictionary.MergedDictionaries>
			<Style x:Key="VariableComboBox" BasedOn="{StaticResource {x:Type ComboBox}}" TargetType="{x:Type ComboBox}">
				<Setter Property="IsSynchronizedWithCurrentItem" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="ComboBox">
							<Grid>
								<p:ToggleButton Name="ToggleButton" Grid.Column="2" ClickMode="Press" Focusable="false" IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Template="{StaticResource ComboBoxToggleButton}" />
								<ContentPresenter Name="ContentSite" Margin="3,3,23,3" HorizontalAlignment="Left" VerticalAlignment="Center" Content="{TemplateBinding SelectionBoxItem}" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" IsHitTestVisible="False" />
								<TextBox x:Name="PART_EditableTextBox" Margin="3,3,23,3" HorizontalAlignment="Left" VerticalAlignment="Center" Background="Transparent" Focusable="True" IsReadOnly="{TemplateBinding IsReadOnly}" Style="{x:Null}" Template="{StaticResource ComboBoxTextBox}" Visibility="Hidden" />
								<Popup Name="Popup" AllowsTransparency="True" Focusable="False" IsOpen="{TemplateBinding IsDropDownOpen}" Placement="Bottom" PopupAnimation="Slide">
									<Grid Name="DropDown" MinWidth="{TemplateBinding ActualWidth}" MaxHeight="{TemplateBinding MaxDropDownHeight}" SnapsToDevicePixels="True">
										<Border x:Name="DropDownBorder" Background="{DynamicResource WindowBackgroundBrush}" BorderBrush="Black" BorderThickness="1" />
										<DockPanel Margin="4,6,4,6">
                                            <Button Name="button" Command="{Binding AddVariableCommand}" Content="{x:Static lang:CommonViews.Create}" DockPanel.Dock="Bottom" Visibility="{Binding AddVariableVisibility, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=True}" />
											<ScrollViewer KeyboardNavigation.DirectionalNavigation="Cycle" SnapsToDevicePixels="True">
												<StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
											</ScrollViewer>
										</DockPanel>
									</Grid>
								</Popup>
							</Grid>
							<ControlTemplate.Triggers>
								<Trigger Property="HasItems" Value="false">
									<Setter TargetName="DropDownBorder" Property="MinHeight" Value="36" />
								</Trigger>
								<Trigger Property="IsEnabled" Value="false">
									<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
								</Trigger>
								<Trigger Property="IsGrouping" Value="true">
									<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
								</Trigger>
								<Trigger SourceName="Popup" Property="Popup.AllowsTransparency" Value="true">
									<Setter TargetName="DropDownBorder" Property="CornerRadius" Value="4" />
									<Setter TargetName="DropDownBorder" Property="Margin" Value="0,2,0,0" />
								</Trigger>
								<Trigger Property="IsEditable" Value="true">
									<Setter Property="IsTabStop" Value="false" />
									<Setter TargetName="PART_EditableTextBox" Property="Visibility" Value="Visible" />
									<Setter TargetName="ContentSite" Property="Visibility" Value="Hidden" />
								</Trigger>
							</ControlTemplate.Triggers>
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</ResourceDictionary>
	</UserControl.Resources>

	<StackPanel Orientation="Horizontal" IsEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=ArgumentEnabled, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}">
		<StackPanel.Resources>
			<CollectionViewSource x:Key="localVariables" Source="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.LocalVariables}" />
			<CollectionViewSource x:Key="globalVariables" Source="{Binding RelativeSource={RelativeSource AncestorType={x:Type UserControl}}, Path=DataContext.GlobalVariables}" />
		</StackPanel.Resources>
		<ComboBox ItemsSource="{Binding VariableScopes}" SelectedItem="{Binding SelectedVariableScope, UpdateSourceTrigger=PropertyChanged}">
			<ComboBox.ItemTemplate>
				<DataTemplate>
					<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
				</DataTemplate>
			</ComboBox.ItemTemplate>
		</ComboBox>

		<ComboBox Width="200" ItemsSource="{Binding Source={StaticResource localVariables}}" SelectedItem="{Binding SelectedVariable, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource VariableComboBox}" Visibility="{Binding Path=SelectedVariableScope, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:VariableScope.LocalVariable}}" />

		<ComboBox Width="200" ItemsSource="{Binding Source={StaticResource globalVariables}}" SelectedItem="{Binding SelectedVariable, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource VariableComboBox}" Visibility="{Binding Path=SelectedVariableScope, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:VariableScope.GlobalVariable}}" />

		<StackPanel Visibility="{Binding SelectedVariableScope, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:VariableScope.ExplicitValue}}">
			<StackPanel>
				<extToolkit:IntegerUpDown Width="200" Maximum="{Binding ExplicitValue.MaxIntValue}" Minimum="{Binding ExplicitValue.MinIntValue}" Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.Integer}}" Value="{Binding ExplicitValue.IntValue, UpdateSourceTrigger=PropertyChanged}" />
				<CheckBox Width="200" IsChecked="{Binding ExplicitValue.BoolValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.Boolean}}" />
				<DockPanel Width="202" Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.String}}">
					<TextBox Width="182" Text="{Binding ExplicitValue.StringValue, UpdateSourceTrigger=PropertyChanged}" />
					<Button Width="20" Height="25" Margin="-5,0,0,0" Command="{Binding EditStringCommand}" Content="..." FontSize="20" Foreground="{DynamicResource ForegroundColorLight}">
						<Button.Style>
							<Style TargetType="Button">
								<Setter Property="Template">
									<Setter.Value>
										<ControlTemplate TargetType="Button">
											<Border Name="border" Background="Orange" BorderThickness="0" CornerRadius="0,3,3,0">
												<ContentPresenter x:Name="contentPresenter" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
											</Border>
											<ControlTemplate.Triggers>
												<Trigger Property="UIElement.IsMouseOver" Value="True">
													<Setter TargetName="border" Property="Border.Background" Value="{DynamicResource HighlightedBackgoundBrush}" />
													<Setter TargetName="border" Property="Border.BorderBrush" Value="{DynamicResource PressedBackgroundBrush}" />
												</Trigger>
											</ControlTemplate.Triggers>
										</ControlTemplate>
									</Setter.Value>
								</Setter>
							</Style>
						</Button.Style>
					</Button>
				</DockPanel>
				<extToolkit:DateTimePicker Width="200" Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.DateTime}}" Value="{Binding ExplicitValue.DateTimeValue, UpdateSourceTrigger=PropertyChanged}" />
				<xc:TimeSpanUpDown Width="200" Height="25" VerticalAlignment="Center" Margin="2" Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.Time}}" Value="{Binding ExplicitValue.TimeSpanValue, UpdateSourceTrigger=PropertyChanged}" />
				<StackPanel Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.Enum}}">
					<ComboBox Width="200" ItemsSource="{Binding ExplicitValue.StateTypeValues}" SelectedItem="{Binding ExplicitValue.StateTypeValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.StateType}}">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<!--<ComboBox Width="200" ItemsSource="{Binding ExplicitValue.DriverTypeValues}" SelectedItem="{Binding ExplicitValue.DriverTypeValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.DriverType}}">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>-->
					<ComboBox Width="200" ItemsSource="{Binding ExplicitValue.PermissionTypeValues}" SelectedItem="{Binding ExplicitValue.PermissionTypeValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.PermissionType}}">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox Width="200" ItemsSource="{Binding ExplicitValue.JournalEventNameTypeValues}" SelectedItem="{Binding ExplicitValue.JournalEventNameTypeValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.JournalEventNameType}}">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox Width="200" ItemsSource="{Binding ExplicitValue.JournalEventDescriptionTypeValues}" SelectedItem="{Binding ExplicitValue.JournalEventDescriptionTypeValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.JournalEventDescriptionType}}">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox Width="200" ItemsSource="{Binding ExplicitValue.JournalObjectTypeValues}" SelectedItem="{Binding ExplicitValue.JournalObjectTypeValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.JournalObjectType}}">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<ComboBox Width="200" ItemsSource="{Binding ExplicitValue.CardTypeValues}" SelectedItem="{Binding ExplicitValue.CardTypeValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.CardType}}">
						<ComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</ComboBox.ItemTemplate>
					</ComboBox>
					<FeaturedComboBox Width="200" Margin="2 2 0 0" ItemsSource="{Binding ExplicitValue.AccessStateValues}" SelectedItem="{Binding ExplicitValue.AccessStateValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.AccessState}}" CanSelectNullItem="True" NullValueText="NULL">
						<FeaturedComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</FeaturedComboBox.ItemTemplate>
					</FeaturedComboBox>
					<FeaturedComboBox Width="200" Margin="2 2 0 0" ItemsSource="{Binding ExplicitValue.DoorStatusValues}" SelectedItem="{Binding ExplicitValue.DoorStatusValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.DoorStatus}}" CanSelectNullItem="True" NullValueText="NULL">
						<FeaturedComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</FeaturedComboBox.ItemTemplate>
					</FeaturedComboBox>
					<FeaturedComboBox Width="200" Margin="2 2 0 0" ItemsSource="{Binding ExplicitValue.BreakInStatusValues}" SelectedItem="{Binding ExplicitValue.BreakInStatusValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.BreakInStatus}}" CanSelectNullItem="True" NullValueText="NULL">
						<FeaturedComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</FeaturedComboBox.ItemTemplate>
					</FeaturedComboBox>
					<FeaturedComboBox Width="200" Margin="2 2 0 0" ItemsSource="{Binding ExplicitValue.ConnectionStatusValues}" SelectedItem="{Binding ExplicitValue.ConnectionStatusValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.ConnectionStatus}}" CanSelectNullItem="True" NullValueText="NULL">
						<FeaturedComboBox.ItemTemplate>
							<DataTemplate>
								<TextBlock Text="{Binding ., Converter={StaticResource EnumToDescriptionConverter}}" />
							</DataTemplate>
						</FeaturedComboBox.ItemTemplate>
					</FeaturedComboBox>
					<xc:ColorPicker Width="200" Height="25" SelectedColor="{Binding ExplicitValue.ColorValue, UpdateSourceTrigger=PropertyChanged}" Visibility="{Binding Path=EnumType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:EnumType.ColorType}}" />
				</StackPanel>
				<TextBlock Margin="7 7 0 0" VerticalAlignment="Top" Visibility="{Binding ExplicitType, Converter={StaticResource EnumToVisibilityConverter}, ConverterParameter={x:Static automation:ExplicitType.Object}}">
					<Hyperlink Command="{Binding ChangeCommand}" Style="{StaticResource HyperlinkStyle}">
						<TextBlock Text="{Binding ExplicitValue.PresentationName}" Visibility="{Binding IsEmpty, Converter={StaticResource InversedBoolToVisibilityConverter}}" />
						<TextBlock Text="{x:Static lang:CommonViews.ChooseObject}">
							<TextBlock.Style>
								<Style>
									<Setter Property="TextBlock.Visibility" Value="Collapsed" />
									<Style.Triggers>
										<DataTrigger Binding="{Binding IsEmpty}" Value="True">
											<Setter Property="TextBlock.Visibility" Value="Visible" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</TextBlock.Style>
						</TextBlock>
					</Hyperlink>
				</TextBlock>
			</StackPanel>
		</StackPanel>
	</StackPanel>
</UserControl>