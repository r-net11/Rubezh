<UserControl x:Class="AutomationModule.Views.ProceduresView"
			 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
			 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
			 xmlns:Views="clr-namespace:AutomationModule.Views"
			 xmlns:procedures="clr-namespace:AutomationModule.Procedures">
	<UserControl.Resources>
		<Style x:Key="ActiveStyle" BasedOn="{StaticResource {x:Type TextBlock}}" TargetType="{x:Type TextBlock}">
			<Style.Triggers>
				<DataTrigger Binding="{Binding IsActive}" Value="false">
					<Setter Property="Foreground" Value="LightGray" />
				</DataTrigger>
			</Style.Triggers>
		</Style>
		<Style x:Key="ProcedureButtons" BasedOn="{StaticResource {x:Type Button}}" TargetType="{x:Type Button}">
			<Setter Property="Foreground" Value="White" />
			<Setter Property="Height" Value="25" />
			<Setter Property="Template">
				<Setter.Value>
					<ControlTemplate TargetType="{x:Type Button}">

						<Grid Height="{TemplateBinding Height}">
							<Border x:Name="Border" Margin="2" Background="{TemplateBinding Background}" BorderThickness="0" CornerRadius="2">
								<ContentPresenter x:Name="ContentSite" Margin="0" HorizontalAlignment="Center" VerticalAlignment="Center">
									<ContentPresenter.Style>
										<Style>
											<Setter Property="TextElement.FontSize" Value="12" />
										</Style>
									</ContentPresenter.Style>
								</ContentPresenter>
							</Border>
						</Grid>

						<ControlTemplate.Triggers>
							<Trigger Property="IsMouseOver" Value="True">
								<Setter TargetName="Border" Property="Background" Value="{DynamicResource HighlightedBackgoundBrush}" />
							</Trigger>
							<Trigger Property="IsPressed" Value="True">
								<Setter TargetName="Border" Property="Background" Value="{DynamicResource PressedBackgroundBrush}" />
							</Trigger>
							<Trigger Property="IsEnabled" Value="False">
								<Setter Property="TextElement.Foreground" Value="DarkGray" />
							</Trigger>
						</ControlTemplate.Triggers>
					</ControlTemplate>
				</Setter.Value>
			</Setter>
		</Style>
		<ContextMenu x:Key="ProcedureContextMenu">
			<IconedMenuItem Command="{Binding AddCommand}" ImageSource="BAdd" Text="Добавить процедуру" />
			<IconedMenuItem Command="{Binding DeleteCommand}" ImageSource="BDelete" Text="Удалить процедуру" />
			<IconedMenuItem Command="{Binding EditCommand}" ImageSource="BEdit" Text="Редактировать процедуру" />
			<IconedMenuItem Command="{Binding CopyCommand}" ImageSource="BCopy" Text="Копировать процедуру" />
			<IconedMenuItem Command="{Binding PasteCommand}" ImageSource="BPaste" Text="Вставить процедуру" />
		</ContextMenu>
	</UserControl.Resources>
	<Grid>
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="7*" MinWidth="300" />
			<ColumnDefinition Width= "1" />
			<ColumnDefinition Width="15*" MinWidth="400"/>
		</Grid.ColumnDefinitions>
		<Grid>
			<Grid.RowDefinitions>
				<RowDefinition Height="*" />
			</Grid.RowDefinitions>
			<DataGrid ContextMenu="{StaticResource ProcedureContextMenu}" ItemsSource="{Binding Procedures}" SelectedItem="{Binding SelectedProcedure}" IsReadOnly="False">
				<DataGrid.InputBindings>
					<MouseBinding Command="{Binding EditCommand}" MouseAction="LeftDoubleClick" />
				</DataGrid.InputBindings>
				<DataGrid.Columns>
					<DataGridTemplateColumn Header="Название" 
											SortMemberPath="Name"
											Width="*">
						<DataGridTemplateColumn.CellTemplate>
							<DataTemplate>
								<StackPanel Orientation="Horizontal">
									<Image VerticalAlignment="Center" Source="/Controls;component/Images/ProcedureYellow.png" Margin="2 0 0 0" />
									<TextBlock Text="{Binding Name}" Style="{StaticResource ActiveStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="2 0" />
								</StackPanel>
							</DataTemplate>
						</DataGridTemplateColumn.CellTemplate>
					</DataGridTemplateColumn>
				</DataGrid.Columns>
			</DataGrid>
		</Grid>

		<GridSplitter Grid.Column="1" Background="Transparent" HorizontalAlignment="Stretch"/>

		<Grid Grid.Column="2" Visibility="{Binding ., Converter={StaticResource NullToVisibilityConverter}}" DataContext="{Binding SelectedProcedure}" Margin="4, -50, 0, 0">
			<Grid>
				<StackPanel Orientation="Vertical" VerticalAlignment="Top" HorizontalAlignment="Left" Margin="280 14 0 0">
					<StackPanel Orientation="Horizontal">
						<Button Content="Шаги" Command="{Binding ShowStepsCommand}" Width="120" Height="28">
							<Button.Style>
								<Style TargetType="{x:Type Button}" BasedOn="{StaticResource ProcedureButtons}">
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToBoolConverter},
											ConverterParameter={x:Static procedures:MenuType.IsSteps}}" Value="True">
											<Setter Property="Background" Value="{DynamicResource PressedBackgroundBrush}" />
										</DataTrigger>
										<DataTrigger Binding="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToBoolConverter},
											ConverterParameter={x:Static procedures:MenuType.IsSteps}, Mode=OneWay}" Value="False">
											<Setter Property="Background" Value="LightGray" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Button.Style>
						</Button>

						<Button Content="Переменные" Command="{Binding ShowVariablesCommand}" Width="120" Height="28">
							<Button.Style>
								<Style TargetType="{x:Type Button}" BasedOn="{StaticResource ProcedureButtons}">
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToBoolConverter},
											ConverterParameter={x:Static procedures:MenuType.IsVariables}, Mode=OneWay}" Value="True">
											<Setter Property="Background" Value="{DynamicResource PressedBackgroundBrush}" />
										</DataTrigger>
										<DataTrigger Binding="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToBoolConverter},
											ConverterParameter={x:Static procedures:MenuType.IsVariables}, Mode=OneWay}" Value="False">
											<Setter Property="Background" Value="LightGray" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Button.Style>
						</Button>

						<Button Content="Аргументы" Command="{Binding ShowArgumentsCommand}" Width="120" Height="28">
							<Button.Style>
								<Style TargetType="{x:Type Button}" BasedOn="{StaticResource ProcedureButtons}">
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToBoolConverter},
											ConverterParameter={x:Static procedures:MenuType.IsArguments}, Mode=OneWay}" Value="True">
											<Setter Property="Background" Value="{DynamicResource PressedBackgroundBrush}" />
										</DataTrigger>
										<DataTrigger Binding="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToBoolConverter},
											ConverterParameter={x:Static procedures:MenuType.IsArguments}, Mode=OneWay}" Value="False">
											<Setter Property="Background" Value="LightGray" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Button.Style>
						</Button>

						<Button Content="Условия запуска" Command="{Binding ShowConditionsCommand}" Width="120" Height="28">
							<Button.Style>
								<Style TargetType="{x:Type Button}" BasedOn="{StaticResource ProcedureButtons}">
									<Style.Triggers>
										<DataTrigger Binding="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToBoolConverter},
											ConverterParameter={x:Static procedures:MenuType.IsConditions}, Mode=OneWay}" Value="True">
											<Setter Property="Background" Value="{DynamicResource PressedBackgroundBrush}" />
										</DataTrigger>
										<DataTrigger Binding="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToBoolConverter},
											ConverterParameter={x:Static procedures:MenuType.IsConditions}, Mode=OneWay}" Value="False">
											<Setter Property="Background" Value="LightGray" />
										</DataTrigger>
									</Style.Triggers>
								</Style>
							</Button.Style>
						</Button>
					</StackPanel>
				</StackPanel>
				<Grid Visibility="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToVisibilityConverter},
					ConverterParameter={x:Static procedures:MenuType.IsSteps}}">
					<Views:StepsView DataContext="{Binding StepsViewModel}" IsVisibleChanged="StepsView_IsVisibleChanged" />
				</Grid>
				<Grid Visibility="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToVisibilityConverter},
					ConverterParameter={x:Static procedures:MenuType.IsVariables}}">
					<Views:VariablesView DataContext="{Binding VariablesViewModel}" />
				</Grid >
				<Grid Visibility="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToVisibilityConverter},
					ConverterParameter={x:Static procedures:MenuType.IsArguments}}">
					<Views:VariablesView DataContext="{Binding ArgumentsViewModel}" />
				</Grid>
				<Grid Visibility="{Binding Path=SelectedMenuType, Converter={StaticResource EnumToVisibilityConverter},
					ConverterParameter={x:Static procedures:MenuType.IsConditions}}">
					<Views:ConditionsView DataContext="{Binding ConditionsViewModel}" />
				</Grid>

			</Grid>
		</Grid>
	</Grid>
</UserControl>