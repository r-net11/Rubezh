with Rec.Record16 do
  begin
    gw := GetEventLogGatewayList3.FindByRawEventCode(EventCode);
    if gw <> nil then
    begin
      // Системная неисправность
      if EventCode = $4A then
      begin
        case Context[1] of
          0: result := result + '<li>' + rsFireAlaramOut + '</li>';
          1: result := result + '<li>' + rsASPT_Out+ '</li>';
          2: result := result + '<li>' + rsMalfunctionOut + '</li>';
          3: result := result + '<li>' + rsReserveOut + '</li>';
        end;
        result := result + '<li>' + rsInputNo + IntToStr(Context[1] + 1) +  '</li>';
      end else
      if EventCode = $83 then
      begin
        case Context[1] of
          0: result := result + '<li>' + rsASPT_Out + '</li>';
          1: result := result + '<li>' + rsFireAlaramOut +'</li>';
          2, 3: result := result + '<li>' + rsDeviceOutput + IntToStr(Context[1] + 1);
        end;  { расшифоровка отменена в связи с сопоставлением события по Context[0]
        case Context[2] of
          0: result := result + '<li>' + rsShortCircuit + '</li>';
          1: result := result + '<li>' + rsWireBreakage + '</li>';
      rsPasswordPC   end;   }
      end else
      if EventCode in [$31, $45] then // Охранные события (сброс тревоги, постановка, снятие)
      begin
        if rec.Ext[21] = 0 then result := result + '<li>' + rsPasswordPC + '</li>';
      end else
      if EventCode = $28 then // Охранные события (сброс тревоги, постановка, снятие)
      begin
        case rec.Ext[24] of
            0:
              begin
                result := result + '<li>' + rsPasswordPC + '</li>';
                if rec.Ext[23] = 0 then
                  result := result + '<li>' + rsThroughUSB + '</li>' else
                  result := result + '<li>' + rsThroughMSChannel + ' ' + IntToStr(rec.Ext[23]) + '</li>';
              end;
            3: result := result + '<li>' + rsIndicator_ShortName + ' ' + IntToStr(rec.Ext[23]) + '</li>';
            7: result := result + '<li>' + rsRemoteControl_ShortName + ' ' + IntToStr(rec.Ext[23]) + '</li>';
            9: result := result + '<li>' + rsRemoteControlFire_ShortName + ' ' + IntToStr(rec.Ext[23]) + '</li>';
          100: result := result + '<li>' + rsMDS_ShortName + ' ' + IntToStr(rec.Ext[23]) + '</li>';
          101: result := result + '<li>' + rsMDS4_ShortName + ' ' + IntToStr(rec.Ext[23]) + '</li>';
          102: result := result + '<li>' + rsMDS5_ShortName + ' ' + IntToStr(rec.Ext[23]) + '</li>';
          else result := result + '<li>' + rsOper_DeviceTypeUnknown + '(' + IntToStr(rec.Ext[24]) + ')' + ' ' + IntToStr(rec.Ext[23]) + '</li>';
        end;
      end else
      if EventCode =$47 then // Неверный пароль/ключ ТМ
      begin
        case Context[1] of
          0: result := result + '<li>' + rsPanelGuardUser + '</li>';
          1: result := result + '<li>' + rsPanelUserOper + '</li>';
          2: result := result + '<li>' + rsPanelUserInst + '</li>';
          3: result := result + '<li>' + rsPanelUserAdmin + '</li>';
        end;
      end else
      if EventCode = $80 then
      begin
        if Context[1] <> 0 then
          result := result + '<li>' + rsInputNo + IntToStr(Context[1]) +  '</li>';
      end else
      if EventCode = $85 then // потеря связи с мониторинговой станцией (БИ, ПДУ, УОО-ТЛ, МС-1, МС-2)
      begin
        if Context[2] <> 0 then
        begin
          case Context[2] of
              3: s := rsIndicator_ShortName;
              7: s := rsRemoteControl_ShortName;
              9: s := rsRemoteControlFire_ShortName;
            100: s := rsMDS_ShortName;
            101: s := rsMDS4_ShortName;
            102: s := rsMDS5_ShortName;
            else s := rsOper_DeviceTypeUnknown + '(' + IntToStr(Context[2]) + ')';
          end;
          result := result + '<li>' + rsDevice + ': ' + s + ' ' + rsAddress + ': ' + IntToStr(Context[1]) + '</li>';
        end;
      end else
      if EventCode = $0D then
      begin
        // 6-ст, 9-мл -> Context[1], Context[4]
        tt := (swap(pword(@Context[1])^) shl 16) or swap(pword(@Context[3])^);

        if tt and $01 <> 0 then
          result := result + '<li>' + rsPanelQueryError +'</li>';
        if tt and $02 <> 0 then
          result := result + '<li>' + rsPanelUnknownAnnType +'</li>';
        if tt and $04 <> 0 then
          result := result + '<li>' + rsPanelInvalidCode + '</li>';
        if tt and $08 <> 0 then
          result := result + '<li>' + rsPanelInvalidParamNo + '</li>';
        if tt and $10 <> 0 then
          result := result + '<li>' + rsPanelInvalidRemoteData +'</li>';
        if tt and $20 <> 0 then
          result := result + '<li>' + rsPanelBadSignature + '</li>';
        if tt and $40 <> 0 then
          result := result + '<li>' + rsPanelIncompatibleVersion+ '</li>';
        if tt and $80 <> 0 then
          result := result + '<li>' + rsPanelDeviceTypeDifferent + '</li>';
        if tt and $100 <> 0 then
          result := result + '<li>' + rsPanelErrorWritingToFlash + '</li>';
        if tt and $200 <> 0 then
          result := result + '<li>' + rsPanelErrorWritingDB + '</li>';
        if tt and $400 <> 0 then
          result := result + '<li>' + rsPanelErrorReadingDB + '</li>';
        if tt and $800 <> 0 then
          result := result + '<li>' + rsPaneInvalidProgramID + '</li>';
        if tt and $1000 <> 0 then
          result := result + '<li>' + rsPanelDatabaseLogicError + '</li>';
        if tt and $2000 <> 0 then
          result := result + '<li>' + rsPanelDuplicateAdresses + '</li>';
        if tt and $4000 <> 0 then
          result := result + '<li>' + rsPanelHardwareFailure + '</li>';
        if tt and $8000 <> 0 then
        begin
          result := result + '<li>' + rsPanelBlockOnDevice + '</li>';
          if Context[5] = $FF then
            DeviceDriver := GetDeviceDriverByType(DeviceRegistry, 10, 1) else
            DeviceDriver := GetDeviceDriverByOldType(DeviceRegistry, Context[5]);
          if DeviceDriver <> nil then
            result := result + '<li>' + DeviceDriver.DriverShortName else
            result := result + '<li>' + rsUnknownType + ': 0x' + IntToHex(Context[5], 1);
          result := result + ' ' + rsAddress + ': ' + IntToStr(Context[7] + 1) + '.' + IntToStr(Context[6]) + '</li>';
        end;
(*        if Context[5] and $01 <> 0 then                                         { $2000 ????}
          result := result + '<li>' + rsPanelDuplicateAdresses + '</li>'; *)
      end;

      if gw.HasPassword then
      begin
        offset := GetEventPassword(gw, Model, Rec);
        case offset of
          0: result := result + '<li>' + rsPasswordPC + '</li>';
          $01: result := result + '<li>' + rsPasswordMMUPT1 + '</li>';
          $02: result := result + '<li>' + rsPasswordMMUPT2 + '</li>';
          $03: result := result + '<li>' + rsPasswordMMUPT3 + '</li>';
          $04: result := result + '<li>' + rsPasswordMMUPT4 + '</li>';
          $05: result := result + '<li>' + rsPasswordRCButton + '</li>';
          $06: result := result + '<li>' + rsPasswordBoxPanel + '</li>';
          $EF: result := result + '<li>' + rsPasswordOper + '</li>';
          $AA: result := result + '<li>' + rsPasswordInstaller + '</li>';
          $CC: result := result + '<li>' + rsPasswordAdmin + '</li>';
          $4D, $4E: result := result + '<li>' + rsPasswordButton + '</li>';
          $4F: result := result + '<li>' + rsAutoRestore + '</li>';
          $50: result := result + '<li>' + rsAutoOff + '</li>';
          else
            result := result + '<li>' + rsPasswordUnknown + IntToStr(offset) + '</li>';
        end;
      end;

      offset := GetEventOffset(gw, otLine);
      if offset <> -1 then
      begin
        result := result + '<li>' + rsALS + ': '+ IntToStr(Model.GetLineNo(PByte(@Context[Offset])^))+ '</li>';
      end;

      offset := GetEventOffset(gw, otDevice);
      if offset <> -1 then

      if EventCode in [$40, $41] then
      begin
        // АСПТ
        result := result + '<li>' + rsDeviceASPT +
          GetDBTableGatewayList3.FindByType(17).DeviceName + ' ' + IntToStr(Context[1] + 1);
      end else
      if not (EventCode in [$83]) then
      with PRawEventDeviceInfo(@Context[Offset])^ do
        begin

          if (EventCode = $01) and (Context[9] > 1) then
            SetAlaramReason;

          dtype := integer(DeviceType) * GetEventIndicatorSign(gw, Rec.Record16);

          if (GetEventIndicatorSign(gw, Rec.Record16) = -1)  and  (DeviceType in [$76, $d4, $d2]) then
            dtype := -dtype;

          if dtype = $34 then
          begin
            case Rec.Ext[22] of
              0: result := result + '<li>' + rsDetectorType + ': ' + rsDetectorTypeUnknown + '</li>';
              1: result := result + '<li>' + rsDetectorType + ': ' + rsDetectorTypeGlass + '</li>';
              2: result := result + '<li>' + rsDetectorType + ': ' + rsDetectorTypeDoor + '</li>';
              3: result := result + '<li>' + rsDetectorType + ': ' + rsDetectorTypeVolume + '</li>';
              4: result := result + '<li>' + rsDetectorType + ': ' + rsDetectorTypeAlarm + '</li>';
            end;
          end;

          // Декодируем насосы
          if dtype = $70 then
          begin
            if LocalAddress < 12  then
              tt := 1024 else
              tt := LocalAddress + 1024;

            result := result + RubezhLogDecodeDeviceState(Rec, GetDBTableGatewayList3.FindByType(tt));

            DeviceDriver := GetDeviceDriverByType(DeviceRegistry, tt, 1);
            if DeviceDriver <> nil then
            begin
              result := result + '<li>' + rsDeviceNS + DeviceDriver.DriverShortName + ' ';
              if LocalAddress - tt + 1024 <> 0 then
                result := result + IntToStr(LocalAddress - tt + 1024);

              result := result + '</li>';
            end;
          end else
          begin
            if dtype = $FF then
              DeviceDriver := GetDeviceDriverByType(DeviceRegistry, 10, 1) else
              DeviceDriver := GetDeviceDriverByOldType(DeviceRegistry, dtype);

            if DeviceDriver <> nil then
            begin
              result := result + RubezhLogDecodeDeviceState(Rec,
                GetDBTableGatewayList3.FindByDeviceDriverID(DeviceDriver.DeviceDriverID));

              result := result + '<li>' + rsOper_Device;

              // для ППУ здесь нужна спец. ветка
              if (GetEventIndicatorSign(gw, Rec.Record16) = -1)  and  (DeviceType in [$76, $d4, $d2]) then
              begin
                result := result + rsPPU_ShortName + ' - ';
              end;

              result := result + DeviceDriver.DriverShortName + ' ';

              // Адрес панели за минусом старшего бита шлейфа
              if Model.GetAddress(atSystem, LocalAddress, SystemAddress, Rec.Ext) <> 0 then
                result := result + ' ' + IntToStr(Model.GetAddress(atSystem, LocalAddress, SystemAddress, Rec.Ext)) + '.';
              if not (dtype in [OldDeviceTypes[dtOutput], OldDeviceTypes[dtSONARDir]]) then
                result := result + IntToStr(Model.GetAddress(atLineNo, LocalAddress, SystemAddress, Rec.Ext)) + '.';
              result := result + IntToStr(Model.GetAddress(atLocal, LocalAddress, SystemAddress, Rec.Ext)) + '</li>';

{              if (SystemAddress and $7F) <> 0 then
                result := result + ' ' + IntToStr(SystemAddress and $7F) + '.';
              result := result + IntToStr((SystemAddress and $80) shr 7 + 1) + '.';
              result := result + IntToStr(LocalAddress) + '</li>'; }
            end;

          end;

          if Model.GetZoneNo(ZoneNoAndPsw) <> 0 then
            result := result + '<li>' + rsOper_Zone + IntToStr(Model.GetZoneNo(ZoneNoAndPsw)) + '</li>';
        end;