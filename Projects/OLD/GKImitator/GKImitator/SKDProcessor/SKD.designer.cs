#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GKImitator.SKDProcessor
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SKUD")]
	public partial class SKDDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertJournal(Journal instance);
    partial void UpdateJournal(Journal instance);
    partial void DeleteJournal(Journal instance);
    #endregion
		
		public SKDDataContext() : 
				base(global::GKImitator.Properties.Settings.Default.SKUDConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SKDDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Journal> Journals
		{
			get
			{
				return this.GetTable<Journal>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Journal")]
	public partial class Journal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _UID;
		
		private System.DateTime _SysemDate;
		
		private System.DateTime _DeviceDate;
		
		private string _Name;
		
		private string _Description;
		
		private int _DeviceNo;
		
		private string _IpPort;
		
		private System.Nullable<System.Guid> _CardUID;
		
		private int _CardSeries;
		
		private int _CardNo;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUIDChanging(System.Guid value);
    partial void OnUIDChanged();
    partial void OnSysemDateChanging(System.DateTime value);
    partial void OnSysemDateChanged();
    partial void OnDeviceDateChanging(System.DateTime value);
    partial void OnDeviceDateChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDeviceNoChanging(int value);
    partial void OnDeviceNoChanged();
    partial void OnIpPortChanging(string value);
    partial void OnIpPortChanged();
    partial void OnCardUIDChanging(System.Nullable<System.Guid> value);
    partial void OnCardUIDChanged();
    partial void OnCardSeriesChanging(int value);
    partial void OnCardSeriesChanged();
    partial void OnCardNoChanging(int value);
    partial void OnCardNoChanged();
    #endregion
		
		public Journal()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UID
		{
			get
			{
				return this._UID;
			}
			set
			{
				if ((this._UID != value))
				{
					this.OnUIDChanging(value);
					this.SendPropertyChanging();
					this._UID = value;
					this.SendPropertyChanged("UID");
					this.OnUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SysemDate", DbType="DateTime NOT NULL")]
		public System.DateTime SysemDate
		{
			get
			{
				return this._SysemDate;
			}
			set
			{
				if ((this._SysemDate != value))
				{
					this.OnSysemDateChanging(value);
					this.SendPropertyChanging();
					this._SysemDate = value;
					this.SendPropertyChanged("SysemDate");
					this.OnSysemDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceDate", DbType="DateTime NOT NULL")]
		public System.DateTime DeviceDate
		{
			get
			{
				return this._DeviceDate;
			}
			set
			{
				if ((this._DeviceDate != value))
				{
					this.OnDeviceDateChanging(value);
					this.SendPropertyChanging();
					this._DeviceDate = value;
					this.SendPropertyChanged("DeviceDate");
					this.OnDeviceDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeviceNo", DbType="Int NOT NULL")]
		public int DeviceNo
		{
			get
			{
				return this._DeviceNo;
			}
			set
			{
				if ((this._DeviceNo != value))
				{
					this.OnDeviceNoChanging(value);
					this.SendPropertyChanging();
					this._DeviceNo = value;
					this.SendPropertyChanged("DeviceNo");
					this.OnDeviceNoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpPort", DbType="NVarChar(50)")]
		public string IpPort
		{
			get
			{
				return this._IpPort;
			}
			set
			{
				if ((this._IpPort != value))
				{
					this.OnIpPortChanging(value);
					this.SendPropertyChanging();
					this._IpPort = value;
					this.SendPropertyChanged("IpPort");
					this.OnIpPortChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardUID", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> CardUID
		{
			get
			{
				return this._CardUID;
			}
			set
			{
				if ((this._CardUID != value))
				{
					this.OnCardUIDChanging(value);
					this.SendPropertyChanging();
					this._CardUID = value;
					this.SendPropertyChanged("CardUID");
					this.OnCardUIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardSeries", DbType="Int NOT NULL")]
		public int CardSeries
		{
			get
			{
				return this._CardSeries;
			}
			set
			{
				if ((this._CardSeries != value))
				{
					this.OnCardSeriesChanging(value);
					this.SendPropertyChanging();
					this._CardSeries = value;
					this.SendPropertyChanged("CardSeries");
					this.OnCardSeriesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNo", DbType="Int NOT NULL")]
		public int CardNo
		{
			get
			{
				return this._CardNo;
			}
			set
			{
				if ((this._CardNo != value))
				{
					this.OnCardNoChanging(value);
					this.SendPropertyChanging();
					this._CardNo = value;
					this.SendPropertyChanged("CardNo");
					this.OnCardNoChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
