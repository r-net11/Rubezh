//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestLicenseServiceClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LicenseEntity", Namespace="http://schemas.datacontract.org/2004/07/License.Model.Entities")]
    [System.SerializableAttribute()]
    public partial class LicenseEntity : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledAutomationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledPhotoVerificationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledRVIField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledServerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsEnabledURVField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUnlimitedUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int OperatorConnectionsNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TotalUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDateTime {
            get {
                return this.CreateDateTimeField;
            }
            set {
                if ((this.CreateDateTimeField.Equals(value) != true)) {
                    this.CreateDateTimeField = value;
                    this.RaisePropertyChanged("CreateDateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabledAutomation {
            get {
                return this.IsEnabledAutomationField;
            }
            set {
                if ((this.IsEnabledAutomationField.Equals(value) != true)) {
                    this.IsEnabledAutomationField = value;
                    this.RaisePropertyChanged("IsEnabledAutomation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabledPhotoVerification {
            get {
                return this.IsEnabledPhotoVerificationField;
            }
            set {
                if ((this.IsEnabledPhotoVerificationField.Equals(value) != true)) {
                    this.IsEnabledPhotoVerificationField = value;
                    this.RaisePropertyChanged("IsEnabledPhotoVerification");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabledRVI {
            get {
                return this.IsEnabledRVIField;
            }
            set {
                if ((this.IsEnabledRVIField.Equals(value) != true)) {
                    this.IsEnabledRVIField = value;
                    this.RaisePropertyChanged("IsEnabledRVI");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabledServer {
            get {
                return this.IsEnabledServerField;
            }
            set {
                if ((this.IsEnabledServerField.Equals(value) != true)) {
                    this.IsEnabledServerField = value;
                    this.RaisePropertyChanged("IsEnabledServer");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabledURV {
            get {
                return this.IsEnabledURVField;
            }
            set {
                if ((this.IsEnabledURVField.Equals(value) != true)) {
                    this.IsEnabledURVField = value;
                    this.RaisePropertyChanged("IsEnabledURV");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUnlimitedUsers {
            get {
                return this.IsUnlimitedUsersField;
            }
            set {
                if ((this.IsUnlimitedUsersField.Equals(value) != true)) {
                    this.IsUnlimitedUsersField = value;
                    this.RaisePropertyChanged("IsUnlimitedUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OperatorConnectionsNumber {
            get {
                return this.OperatorConnectionsNumberField;
            }
            set {
                if ((this.OperatorConnectionsNumberField.Equals(value) != true)) {
                    this.OperatorConnectionsNumberField = value;
                    this.RaisePropertyChanged("OperatorConnectionsNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int TotalUsers {
            get {
                return this.TotalUsersField;
            }
            set {
                if ((this.TotalUsersField.Equals(value) != true)) {
                    this.TotalUsersField = value;
                    this.RaisePropertyChanged("TotalUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UID {
            get {
                return this.UIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UIDField, value) != true)) {
                    this.UIDField = value;
                    this.RaisePropertyChanged("UID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.ILicenseService")]
    public interface ILicenseService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetDemoLicense", ReplyAction="http://tempuri.org/ILicenseService/GetDemoLicenseResponse")]
        string GetDemoLicense(string userKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetDemoLicense", ReplyAction="http://tempuri.org/ILicenseService/GetDemoLicenseResponse")]
        System.Threading.Tasks.Task<string> GetDemoLicenseAsync(string userKey);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetProductLicense", ReplyAction="http://tempuri.org/ILicenseService/GetProductLicenseResponse")]
        string GetProductLicense(TestLicenseServiceClient.ServiceReference.LicenseEntity license);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/GetProductLicense", ReplyAction="http://tempuri.org/ILicenseService/GetProductLicenseResponse")]
        System.Threading.Tasks.Task<string> GetProductLicenseAsync(TestLicenseServiceClient.ServiceReference.LicenseEntity license);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/TestConnection", ReplyAction="http://tempuri.org/ILicenseService/TestConnectionResponse")]
        string TestConnection();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/TestConnection", ReplyAction="http://tempuri.org/ILicenseService/TestConnectionResponse")]
        System.Threading.Tasks.Task<string> TestConnectionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/TestConnectionWithParameter", ReplyAction="http://tempuri.org/ILicenseService/TestConnectionWithParameterResponse")]
        string TestConnectionWithParameter(string input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILicenseService/TestConnectionWithParameter", ReplyAction="http://tempuri.org/ILicenseService/TestConnectionWithParameterResponse")]
        System.Threading.Tasks.Task<string> TestConnectionWithParameterAsync(string input);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILicenseServiceChannel : TestLicenseServiceClient.ServiceReference.ILicenseService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicenseServiceClient : System.ServiceModel.ClientBase<TestLicenseServiceClient.ServiceReference.ILicenseService>, TestLicenseServiceClient.ServiceReference.ILicenseService {
        
        public LicenseServiceClient() {
        }
        
        public LicenseServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LicenseServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LicenseServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetDemoLicense(string userKey) {
            return base.Channel.GetDemoLicense(userKey);
        }
        
        public System.Threading.Tasks.Task<string> GetDemoLicenseAsync(string userKey) {
            return base.Channel.GetDemoLicenseAsync(userKey);
        }
        
        public string GetProductLicense(TestLicenseServiceClient.ServiceReference.LicenseEntity license) {
            return base.Channel.GetProductLicense(license);
        }
        
        public System.Threading.Tasks.Task<string> GetProductLicenseAsync(TestLicenseServiceClient.ServiceReference.LicenseEntity license) {
            return base.Channel.GetProductLicenseAsync(license);
        }
        
        public string TestConnection() {
            return base.Channel.TestConnection();
        }
        
        public System.Threading.Tasks.Task<string> TestConnectionAsync() {
            return base.Channel.TestConnectionAsync();
        }
        
        public string TestConnectionWithParameter(string input) {
            return base.Channel.TestConnectionWithParameter(input);
        }
        
        public System.Threading.Tasks.Task<string> TestConnectionWithParameterAsync(string input) {
            return base.Channel.TestConnectionWithParameterAsync(input);
        }
    }
}
