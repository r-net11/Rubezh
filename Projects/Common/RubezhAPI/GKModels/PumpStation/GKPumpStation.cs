using Common;
using RubezhAPI.Plans.Interfaces;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

namespace RubezhAPI.GK
{
	/// <summary>
	/// Насосная станция ГК
	/// </summary>
	[DataContract]
	public class GKPumpStation : GKBase, IPlanPresentable
	{
		public GKPumpStation()
		{
			Delay = 30;
			Hold = 600;
			DelayRegime = DelayRegime.Off;
			NSPumpsCount = 1;
			NSDeltaTime = 5;
			StartLogic = new GKLogic();
			StopLogic = new GKLogic();
			AutomaticOffLogic = new GKLogic();
			this.PlanElementUIDs = new List<Guid>();

			NSDevices = new List<GKDevice>();
			NSDeviceUIDs = new List<Guid>();

			Pim = new GKPim()
			{
				IsAutoGenerated = true,
				PumpStationUID = UID,
				UID = GuidHelper.CreateOn(UID, 0)
			};
		}

		public override void Invalidate(GKDeviceConfiguration deviceConfiguration)
		{
			var nsDevicesUIDs = new List<Guid>();
			NSDevices = new List<GKDevice>();
			foreach (var NSDevicesUID in NSDeviceUIDs)
			{
				var device = deviceConfiguration.Devices.FirstOrDefault(x => x.UID == NSDevicesUID);
				if (device != null)
				{
					nsDevicesUIDs.Add(NSDevicesUID);
					NSDevices.Add(device);
					AddDependentElement(device);
				}
			}

			NSDeviceUIDs = nsDevicesUIDs;

			UpdateLogic(deviceConfiguration);

			StartLogic.GetObjects().ForEach(x => AddDependentElement(x));

			StopLogic.GetObjects().ForEach(x => AddDependentElement(x));

			AutomaticOffLogic.GetObjects().ForEach(x => AddDependentElement(x));

		}

		public override void UpdateLogic(GKDeviceConfiguration deviceConfiguration)
		{
			deviceConfiguration.InvalidateOneLogic(this, StartLogic);
			deviceConfiguration.InvalidateOneLogic(this, StopLogic);
			deviceConfiguration.InvalidateOneLogic(this, AutomaticOffLogic);
		}

		[XmlIgnore]
		public override bool IsLogicOnKau { get; set; }

		[XmlIgnore]
		public GKPim Pim { get; private set; }
		[XmlIgnore]
		public override GKBaseObjectType ObjectType { get { return GKBaseObjectType.PumpStation; } }
		[XmlIgnore]
		public List<GKDevice> NSDevices { get; set; }

		/// <summary>
		/// Время задержки
		/// </summary>
		[DataMember]
		public ushort Delay { get; set; }

		ushort _hold;
		/// <summary>
		/// Время удержания
		/// </summary>		
		[DataMember]
		public ushort Hold { get; set; }

		/// <summary>
		/// Режим после удержания
		/// </summary>
		[DataMember]
		public DelayRegime DelayRegime { get; set; }

		/// <summary>
		/// Количество основных насосов
		/// </summary>
		[DataMember]
		public int NSPumpsCount { get; set; }

		/// <summary>
		/// Время разновременного пуска
		/// </summary>
		[DataMember]
		public int NSDeltaTime { get; set; }

		/// <summary>
		/// Идентификаторы устройств, входящих в НС
		/// </summary>
		[DataMember]
		public List<Guid> NSDeviceUIDs { get; set; }

		/// <summary>
		/// Логика включения
		/// </summary>
		[DataMember]
		public GKLogic StartLogic { get; set; }

		/// <summary>
		/// Логика выключения
		/// </summary>
		[DataMember]
		public GKLogic StopLogic { get; set; }

		/// <summary>
		/// Логика отключения автоматики
		/// </summary>
		[DataMember]
		public GKLogic AutomaticOffLogic { get; set; }

		[XmlIgnore]
		public override string PresentationName
		{
			get
			{
				var presentationName = No + "." + Name;
				if (Pim != null)
					Pim.Name = presentationName;
				return presentationName;
			}
		}

		[XmlIgnore]
		public override string ImageSource
		{
			get { return "/Controls;component/Images/BPumpStation.png"; }
		}

		[XmlIgnore()]
		public List<Guid> PlanElementUIDs { get; set; }
		public void OnPlanElementUIDsChanged()
		{
			if (PlanElementUIDsChanged != null)
				PlanElementUIDsChanged();
		}
		public event Action PlanElementUIDsChanged;

		public GKPumpStation Clone()
		{
			var delay = new GKPumpStation();
			delay.Name = this.Name;
			delay.Description = this.Description;
			delay.Delay = this.Delay;
			delay.Hold = this.Hold;
			delay.DelayRegime = this.DelayRegime;
			delay.NSPumpsCount = this.NSPumpsCount;
			delay.NSDeltaTime = this.NSDeltaTime;
			delay.NSDeviceUIDs = new List<Guid>(this.NSDeviceUIDs);

			delay.StartLogic.OnClausesGroup = this.StartLogic.OnClausesGroup.Clone();
			delay.StartLogic.OffClausesGroup = this.StartLogic.OffClausesGroup.Clone();
			delay.StartLogic.StopClausesGroup = this.StartLogic.StopClausesGroup.Clone();
			delay.StartLogic.OnNowClausesGroup = this.StartLogic.OnNowClausesGroup.Clone();
			delay.StartLogic.OffNowClausesGroup = this.StartLogic.OffNowClausesGroup.Clone();

			delay.StopLogic.OnClausesGroup = this.StartLogic.OnClausesGroup.Clone();
			delay.StopLogic.OffClausesGroup = this.StartLogic.OffClausesGroup.Clone();
			delay.StopLogic.StopClausesGroup = this.StartLogic.StopClausesGroup.Clone();
			delay.StopLogic.OnNowClausesGroup = this.StartLogic.OnNowClausesGroup.Clone();
			delay.StopLogic.OffNowClausesGroup = this.StartLogic.OffNowClausesGroup.Clone();

			delay.AutomaticOffLogic.OnClausesGroup = this.StartLogic.OnClausesGroup.Clone();
			delay.AutomaticOffLogic.OffClausesGroup = this.StartLogic.OffClausesGroup.Clone();
			delay.AutomaticOffLogic.StopClausesGroup = this.StartLogic.StopClausesGroup.Clone();
			delay.AutomaticOffLogic.OnNowClausesGroup = this.StartLogic.OnNowClausesGroup.Clone();
			delay.AutomaticOffLogic.OffNowClausesGroup = this.StartLogic.OffNowClausesGroup.Clone();

			return delay;
		}
	}
}