<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
					xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
					xmlns:controls="clr-namespace:Controls"
					xmlns:converters="clr-namespace:Controls.TreeList.Converters"
					xmlns:tree="clr-namespace:Controls.TreeList">

	<Style TargetType="{x:Type ListViewItem}">
		<Setter Property="Panel.Background" Value="#00FFFFFF" />
		<Setter Property="Padding" Value="1,0,0,0" />
		<Setter Property="Margin" Value="0,0,0,0" />
		<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
		<Setter Property="BorderThickness" Value="0,0,0,1" />
		<Setter Property="BorderBrush" Value="LightGray" />
		<Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
		<Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
		<Setter Property="Height" Value="20" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="FocusVisualStyle">
			<Setter.Value>
				<Style TargetType="IFrameworkInputElement">
					<Setter Property="Control.Template">
						<Setter.Value>
							<ControlTemplate>
								<Rectangle />
							</ControlTemplate>
						</Setter.Value>
					</Setter>
				</Style>
			</Setter.Value>
		</Setter>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListViewItem">
					<Border Name="Bd"
							Background="{TemplateBinding Panel.Background}"
							BorderBrush="{TemplateBinding Border.BorderBrush}"
							BorderThickness="{TemplateBinding Border.BorderThickness}"
							Padding="{TemplateBinding Control.Padding}"
							SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
						<DockPanel>
							<CheckBox x:Name="mark" Margin="2,0,0,0"
									  VerticalAlignment="Center"
									  DockPanel.Dock="Left"
									  IsChecked="{Binding IsSelected, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
									  IsHitTestVisible="False"
									  Visibility="Collapsed">
								<CheckBox.Template>
									<ControlTemplate TargetType="{x:Type CheckBox}">
										<BulletDecorator Background="Transparent">
											<BulletDecorator.Bullet>
												<Grid Width="13" Height="13">
													<Ellipse x:Name="Border" Fill="White" Stroke="Black" StrokeThickness="1" />
													<Ellipse x:Name="CheckMark" Margin="4" Fill="Black" />
												</Grid>
											</BulletDecorator.Bullet>
											<ContentPresenter Margin="4,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Center" RecognizesAccessKey="True" />
										</BulletDecorator>
										<ControlTemplate.Triggers>
											<Trigger Property="IsChecked" Value="false">
												<Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed" />
											</Trigger>
											<Trigger Property="IsMouseOver" Value="true">
												<Setter TargetName="Border" Property="Fill" Value="{DynamicResource HighlightedBackgoundBrush}" />
											</Trigger>
											<Trigger Property="IsPressed" Value="true">
												<Setter TargetName="Border" Property="Fill" Value="{DynamicResource PressedBackgroundBrush}" />
												<Setter TargetName="Border" Property="Stroke" Value="{DynamicResource HighlightedBackgoundBrush}" />
											</Trigger>
											<Trigger Property="IsEnabled" Value="false">
												<Setter TargetName="Border" Property="Fill" Value="{DynamicResource DisabledBackgroundBrush}" />
												<Setter TargetName="Border" Property="Stroke" Value="{DynamicResource DisabledBorderBrush}" />
												<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
											</Trigger>
										</ControlTemplate.Triggers>
									</ControlTemplate>
								</CheckBox.Template>
							</CheckBox>
							<controls:TreeGridViewRowPresenter x:Name="PART_Header">
								<controls:TreeGridViewRowPresenter.Resources>
									<Style TargetType="{x:Type ContentPresenter}">
										<Setter Property="VerticalAlignment" Value="Center" />
										<Setter Property="HorizontalAlignment" Value="Stretch" />
									</Style>
								</controls:TreeGridViewRowPresenter.Resources>
								<controls:TreeGridViewRowPresenter.Expander>
									<tree:RowExpander />
								</controls:TreeGridViewRowPresenter.Expander>
							</controls:TreeGridViewRowPresenter>
						</DockPanel>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="controls:UIBehavior.ShowSelectionMark" Value="True">
							<Setter TargetName="mark" Property="Visibility" Value="Visible" />
						</Trigger>
						<Trigger Property="controls:UIBehavior.IsActiveSelectionMark" Value="True">
							<Setter TargetName="mark" Property="IsHitTestVisible" Value="True" />
						</Trigger>
						<Trigger Property="IsSelected" Value="true">
							<Setter TargetName="Bd" Property="Panel.Background" Value="{DynamicResource PressedBackgroundBrush}" />
							<Setter Property="TextElement.Foreground" Value="White" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Foreground" Value="{DynamicResource DisabledForegroundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="listviewscroll" TargetType="{x:Type ScrollViewer}">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ScrollViewer}">
					<Grid Background="{TemplateBinding Background}">
						<Grid.ColumnDefinitions>
							<ColumnDefinition Width="*" />
							<ColumnDefinition Width="Auto" />
						</Grid.ColumnDefinitions>
						<Grid.RowDefinitions>
							<RowDefinition Height="Auto" />
							<RowDefinition Height="*" />
							<RowDefinition Height="Auto" />
						</Grid.RowDefinitions>
						<ScrollViewer Grid.Row="0" Grid.Column="0"
									  Background="{DynamicResource BackgroundBrush}"
									  Focusable="false"
									  HorizontalScrollBarVisibility="Hidden"
									  VerticalScrollBarVisibility="Hidden">
							<GridViewHeaderRowPresenter AllowsColumnReorder="False"
														Columns="{Binding Path=View.Columns, RelativeSource={RelativeSource AncestorType={x:Type ListView}}}"
														SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						</ScrollViewer>
						<Rectangle Grid.Row="0" Grid.Column="1"
								   Fill="{DynamicResource BackgroundBrush}"
								   StrokeThickness="0" />
						<ScrollContentPresenter Name="PART_ScrollContentPresenter"
												Grid.Row="1" Grid.Column="0"
												CanContentScroll="{TemplateBinding CanContentScroll}"
												Content="{TemplateBinding Content}"
												ContentTemplate="{TemplateBinding ContentTemplate}"
												KeyboardNavigation.DirectionalNavigation="Local"
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
						<ScrollBar Name="PART_VerticalScrollBar"
								   Grid.Row="1" Grid.Column="1"
								   Cursor="Arrow"
								   Maximum="{TemplateBinding ScrollableHeight}"
								   Minimum="0.0"
								   Orientation="Vertical"
								   ViewportSize="{TemplateBinding ViewportHeight}"
								   Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}"
								   Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
						<ScrollBar Name="PART_HorizontalScrollBar"
								   Grid.Row="2" Grid.Column="0"
								   Cursor="Arrow" Maximum="{TemplateBinding ScrollableWidth}"
								   Minimum="0.0"
								   Orientation="Horizontal"
								   ViewportSize="{TemplateBinding ViewportWidth}"
								   Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}"
								   Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" />
						<DockPanel Grid.Row="2" Grid.Column="1"
								   Background="{Binding Path=Background, ElementName=PART_VerticalScrollBar}"
								   LastChildFill="false">
							<Rectangle Width="1" DockPanel.Dock="Left" Fill="White" Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />
							<Rectangle Height="1" DockPanel.Dock="Top" Fill="White" Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
						</DockPanel>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="{x:Type ListView}" TargetType="{x:Type ListView}">
		<Setter Property="Panel.Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}" />
		<Setter Property="Border.BorderBrush" Value="#00FFFFFF" />
		<Setter Property="Border.BorderThickness" Value="2,2,2,2" />
		<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}" />
		<Setter Property="HorizontalContentAlignment" Value="Stretch" />
		<Setter Property="VerticalContentAlignment" Value="Center" />
		<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="{x:Static ScrollBarVisibility.Auto}" />
		<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="{x:Static ScrollBarVisibility.Visible}" />
		<Setter Property="ScrollViewer.CanContentScroll" Value="True" />
		<Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True" />
		<Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
		<Setter Property="controls:ListViewLayoutManager.Enabled" Value="True" />
		<Setter Property="controls:ListViewLayoutManager.MinWidth" Value="50" />
		<Setter Property="controls:ListViewLayoutManager.Columns" Value="{Binding View.Columns, RelativeSource={RelativeSource Self}}" />
		<Setter Property="SelectionMode" Value="Single" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ListView}">
					<Grid>
						<Border Name="Bd" Margin="1" Background="DarkGray" BorderThickness="0" CornerRadius="5" />
						<Grid>
							<Grid.OpacityMask>
								<VisualBrush Visual="{Binding Source={x:Reference Bd}}" />
							</Grid.OpacityMask>
							<ScrollViewer Background="{TemplateBinding Background}" CanContentScroll="True" 
										  HorizontalScrollBarVisibility="{TemplateBinding ScrollViewer.HorizontalScrollBarVisibility}"
										  Padding="{TemplateBinding Padding}"
										  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										  Style="{StaticResource listviewscroll}"
										  VerticalScrollBarVisibility="{TemplateBinding ScrollViewer.VerticalScrollBarVisibility}">
								<ItemsPresenter SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" />
							</ScrollViewer>
						</Grid>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsGrouping" Value="true">
							<Setter Property="ScrollViewer.CanContentScroll" Value="false" />
						</Trigger>
						<Trigger Property="IsEnabled" Value="false">
							<Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
		<Setter Property="Focusable" Value="False" />
		<Setter Property="Width" Value="20" />
		<Setter Property="Height" Value="20" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Border Background="Transparent">
						<Path x:Name="CheckMark" Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="Gray" UseLayoutRounding="False" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="CheckMark" Property="Fill" Value="{DynamicResource HighlightedBackgoundBrush}" />
						</Trigger>
						<Trigger Property="IsChecked" Value="False">
							<Setter TargetName="CheckMark" Property="Data" Value="M6,2 L10,2 L10,-2 L12,-2 L12,2 L16,2 L16,4 L12,4 L12,8 L10,8 L10,4 L6,4 L6,2 z" />
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="CheckMark" Property="Data" Value="M6,2 L16,2 L16,4 L6,4 z" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<converters:LevelToIndentConverter x:Key="LevelToIndentConverter" />
	<converters:CanExpandConverter x:Key="CanExpandConverter" />

	<Style BasedOn="{StaticResource {x:Type ListView}}" TargetType="{x:Type tree:TreeList}" />

	<Style BasedOn="{StaticResource {x:Type ListViewItem}}" TargetType="{x:Type tree:TreeListItem}">
		<Style.Resources>
			<Style TargetType="{x:Type tree:RowExpander}">
				<Setter Property="Focusable" Value="False" />
				<Setter Property="Template">
					<Setter.Value>
						<ControlTemplate TargetType="{x:Type tree:RowExpander}">
							<ToggleButton x:Name="Expander"
										  Margin="{Binding Level, Converter={StaticResource LevelToIndentConverter}}"
										  ClickMode="Press" DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type tree:TreeListItem}}}"
										  IsChecked="{Binding IsExpanded, Mode=TwoWay}" Style="{StaticResource ExpandCollapseToggleStyle}"
										  Visibility="{Binding HasChildren, Converter={StaticResource CanExpandConverter}}" />
						</ControlTemplate>
					</Setter.Value>
				</Setter>
			</Style>
		</Style.Resources>
	</Style>

</ResourceDictionary>