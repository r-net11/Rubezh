<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit">
	<!-- =============================================================================== -->
	<!-- ResourceDictionary for TimePicker and related controls                          -->
	<!-- =============================================================================== -->

	<xctk:InverseBoolConverter x:Key="InverseBoolConverter" />
	<xctk:TimeFormatToDateTimeFormatConverter x:Key="TimeFormatToDateTimeFormatConverter" />

	<DataTemplate x:Key="DefaultWatermarkTemplate">
		<ContentControl Content="{Binding}" Foreground="Gray" Focusable="False" Margin="0,0,3,0" />
	</DataTemplate>

	<LinearGradientBrush x:Key="PopupDarkBorderBrush" EndPoint="0.5,1" StartPoint="0.5,0">
		<GradientStop Color="#FFA3AEB9" Offset="0" />
		<GradientStop Color="#FF8399A9" Offset="0.375" />
		<GradientStop Color="#FF718597" Offset="0.375" />
		<GradientStop Color="#FF617584" Offset="1" />
	</LinearGradientBrush>

	<LinearGradientBrush x:Key="PopupBackgroundBrush" StartPoint="0,0" EndPoint="0,1">
		<LinearGradientBrush.GradientStops>
			<GradientStopCollection>
				<GradientStop Offset="0" Color="#FFffffff" />
				<GradientStop Offset="1" Color="#FFE8EBED" />
			</GradientStopCollection>
		</LinearGradientBrush.GradientStops>
	</LinearGradientBrush>

	<Style x:Key="TimePickerToggleButtonStyle" TargetType="ToggleButton">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ToggleButton">
					<Grid SnapsToDevicePixels="True">
						<xctk:ButtonChrome x:Name="ToggleButtonChrome"
                                       CornerRadius="0,2,2,0"
                                       RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:TimePicker}}"
                                       RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=xctk:TimePicker}}"
                                       RenderMouseOver="{TemplateBinding IsMouseOver}"
                                       RenderPressed="{TemplateBinding IsPressed}">
							<xctk:ButtonChrome.Background>
								<LinearGradientBrush StartPoint="0, 0" EndPoint="0,1">
									<GradientStop Offset="0" Color="#fbd029" />
									<GradientStop Offset="1" Color="#F5BD05" />
								</LinearGradientBrush>
							</xctk:ButtonChrome.Background>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>

								<ContentPresenter HorizontalAlignment="Stretch" VerticalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

								<Grid x:Name="arrowGlyph" IsHitTestVisible="False" Grid.Column="1" Margin="5">
									<Path 
										x:Name="Arrow" 
										Width="7" 
										Height="4" 
										Data="M 0,1 C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1 z" 
										Fill="White" />
								</Grid>
							</Grid>
						</xctk:ButtonChrome>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsEnabled" Value="False">
							<Setter Property="Fill" TargetName="Arrow" Value="#AFAFAF" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<SolidColorBrush x:Key="ListItemHover" Color="#FFE7F5FD" />

	<Style x:Key="TimeItemStyle" TargetType="ListBoxItem">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="ListBoxItem">
					<Border Name="Border" SnapsToDevicePixels="true">
						<ContentPresenter Margin="4" />
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{StaticResource ListItemHover}" />
						</Trigger>
						<Trigger Property="IsSelected" Value="True">
							<Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}" />
							<Setter Property="Foreground" Value="White" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

	<!-- =============================================================================== -->
	<!-- TimePicker                                                                      -->
	<!-- =============================================================================== -->

	<Style TargetType="{x:Type xctk:TimePicker}">
		<Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
		<Setter Property="IsTabStop" Value="False" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type xctk:TimePicker}">
					<Border>
						<Grid>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*" />
									<ColumnDefinition Width="Auto" />
								</Grid.ColumnDefinitions>
								<xctk:DateTimeUpDown x:Name="PART_TimeUpDown" 
                                              BorderThickness="1,1,0,1"
                                              Background="{TemplateBinding Background}"
                                              Foreground="{TemplateBinding Foreground}"
                                              ContextMenu="{TemplateBinding ContextMenu}"
                                              AllowSpin="{TemplateBinding AllowSpin}"
                                              TabIndex="{TemplateBinding TabIndex}"
                                              Padding="{TemplateBinding Padding}"
                                              Format="{TemplateBinding Format, Converter={StaticResource TimeFormatToDateTimeFormatConverter}}"
                                              FormatString="{TemplateBinding FormatString}"
                                              ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}"
                                              Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}"
                                              Watermark="{TemplateBinding Watermark}"
                                              WatermarkTemplate="{TemplateBinding WatermarkTemplate}"
                                              TextAlignment="{TemplateBinding TextAlignment}"/>
								<ToggleButton x:Name="_timePickerToggleButton"
                                      Grid.Column="1"
                                      Focusable="False"
                                      IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                      Style="{StaticResource TimePickerToggleButtonStyle}"
                                      IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}" />
							</Grid>
							<Popup x:Name="PART_Popup"
                            IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}"
                            StaysOpen="False">
								<Border BorderThickness="1" Background="{StaticResource PopupBackgroundBrush}" BorderBrush="{StaticResource PopupDarkBorderBrush}">
									<Grid>
										<!--Height of dropDown listbox -->
										<ListBox x:Name="PART_TimeListItems"
                                       BorderThickness="0"
                                       Width="150"
                                       Height="100" 
                                       DisplayMemberPath="Display"
                                       ItemContainerStyle="{StaticResource TimeItemStyle}" />
									</Grid>
								</Border>
							</Popup>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True">
							<Setter TargetName="PART_TimeUpDown" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TimeUpDown}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<!--	<Style TargetType="{x:Type xctk:TimePicker}">
		<Setter Property="WatermarkTemplate">
			<Setter.Value>
				<DataTemplate>
					<ContentControl Content="{Binding}" Foreground="Gray" Focusable="False" Margin="0,0,3,0"/>
				</DataTemplate>
			</Setter.Value>
		</Setter>
		<Setter Property="IsTabStop" Value="False"/>
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type xctk:TimePicker}">
					<Border>
						<Grid>
							<Grid>
								<Grid.ColumnDefinitions>
									<ColumnDefinition Width="*"/>
									<ColumnDefinition Width="Auto"/>
								</Grid.ColumnDefinitions>
								<xctk:DateTimeUpDown x:Name="PART_TimeUpDown" AllowSpin="{TemplateBinding AllowSpin}" BorderThickness="1,1,0,1" Background="{TemplateBinding Background}" ContextMenu="{TemplateBinding ContextMenu}" Foreground="{TemplateBinding Foreground}" FormatString="{TemplateBinding FormatString}" ShowButtonSpinner="{TemplateBinding ShowButtonSpinner}" TextAlignment="{TemplateBinding TextAlignment}" Text="" TabIndex="{TemplateBinding TabIndex}" Value="{Binding Value, RelativeSource={RelativeSource TemplatedParent}}" WatermarkTemplate="{TemplateBinding WatermarkTemplate}" Watermark="{TemplateBinding Watermark}">
									<xctk:DateTimeUpDown.Format>
										<TemplateBinding Property="Format">
											<TemplateBinding.Converter>
												<xctk:TimeFormatToDateTimeFormatConverter/>
											</TemplateBinding.Converter>
										</TemplateBinding>
									</xctk:DateTimeUpDown.Format>
								</xctk:DateTimeUpDown>
								<ToggleButton x:Name="_timePickerToggleButton" Grid.Column="1" Focusable="False" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}">
									<ToggleButton.IsHitTestVisible>
										<Binding Path="IsOpen" RelativeSource="{RelativeSource TemplatedParent}">
											<Binding.Converter>
												<xctk:InverseBoolConverter/>
											</Binding.Converter>
										</Binding>
									</ToggleButton.IsHitTestVisible>
									<ToggleButton.Style>
										<Style TargetType="{x:Type ToggleButton}">
											<Setter Property="Template">
												<Setter.Value>
													<ControlTemplate TargetType="{x:Type ToggleButton}">
														<Grid SnapsToDevicePixels="True">
															<xctk:ButtonChrome x:Name="ToggleButtonChrome" CornerRadius="0,2,2,0" RenderMouseOver="{TemplateBinding IsMouseOver}" RenderPressed="{TemplateBinding IsPressed}" RenderChecked="{Binding IsOpen, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}" RenderEnabled="{Binding IsEnabled, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type xctk:TimePicker}}}">
																<xctk:ButtonChrome.Background>
																	<LinearGradientBrush StartPoint="0, 0" EndPoint="0,1">
																		<GradientStop Offset="0" Color="#fbd029" />
																		<GradientStop Offset="1" Color="#F5BD05" />
																	</LinearGradientBrush>
																</xctk:ButtonChrome.Background>
																<Grid>
																	<Grid.ColumnDefinitions>
																		<ColumnDefinition Width="*"/>
																		<ColumnDefinition Width="Auto"/>
																	</Grid.ColumnDefinitions>
																	<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" HorizontalAlignment="Stretch" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Stretch"/>
																	<Grid x:Name="arrowGlyph" Grid.Column="1" IsHitTestVisible="False" Margin="5">
																		<Path 
																			x:Name="Arrow" 
																			Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" 
																			Fill="White" 
																			Height="4"
																			Width="7"/>
																	</Grid>
																</Grid>
															</xctk:ButtonChrome>
														</Grid>
														<ControlTemplate.Triggers>
															<Trigger Property="IsEnabled" Value="False">
																<Setter Property="Fill" TargetName="Arrow" Value="#FFAFAFAF"/>
															</Trigger>
														</ControlTemplate.Triggers>
													</ControlTemplate>
												</Setter.Value>
											</Setter>
										</Style>
									</ToggleButton.Style>
								</ToggleButton>
							</Grid>
							<Popup x:Name="PART_Popup" IsOpen="{Binding IsChecked, ElementName=_timePickerToggleButton}" StaysOpen="False">
								<Border BorderThickness="1">
									<Border.BorderBrush>
										<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
											<GradientStop Color="#FFA3AEB9" Offset="0"/>
											<GradientStop Color="#FF8399A9" Offset="0.375"/>
											<GradientStop Color="#FF718597" Offset="0.375"/>
											<GradientStop Color="#FF617584" Offset="1"/>
										</LinearGradientBrush>
									</Border.BorderBrush>
									<Border.Background>
										<LinearGradientBrush EndPoint="0,1" StartPoint="0,0">
											<GradientStop Color="White" Offset="0"/>
											<GradientStop Color="#FFE8EBED" Offset="1"/>
										</LinearGradientBrush>
									</Border.Background>
									<Grid>
										<ListBox x:Name="PART_TimeListItems" BorderThickness="0" DisplayMemberPath="Display" Height="130" Width="150">
											<ListBox.ItemContainerStyle>
												<Style TargetType="{x:Type ListBoxItem}">
													<Setter Property="Template">
														<Setter.Value>
															<ControlTemplate TargetType="{x:Type ListBoxItem}">
																<Border x:Name="Border" SnapsToDevicePixels="True">
																	<ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Margin="4"/>
																</Border>
																<ControlTemplate.Triggers>
																	<Trigger Property="IsMouseOver" Value="True">
																		<Setter Property="Background" TargetName="Border" Value="#FFE7F5FD"/>
																	</Trigger>
																	<Trigger Property="IsSelected" Value="True">
																		<Setter Property="Background" TargetName="Border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
																		<Setter Property="Foreground" Value="White"/>
																	</Trigger>
																</ControlTemplate.Triggers>
															</ControlTemplate>
														</Setter.Value>
													</Setter>
												</Style>
											</ListBox.ItemContainerStyle>
										</ListBox>
									</Grid>
								</Border>
							</Popup>
						</Grid>
					</Border>
					<ControlTemplate.Triggers>
						<Trigger Property="IsFocused" Value="True">
							<Setter Property="FocusManager.FocusedElement" TargetName="PART_TimeUpDown" Value="{Binding ElementName=PART_TimeUpDown}"/>
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style> -->
</ResourceDictionary>