<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:ribbon="clr-namespace:Infrastructure.Common.Windows.Ribbon;assembly=Infrastructure.Common.Windows" xmlns:loc="clr-namespace:Controls.Ribbon.Views"
					xmlns:converters="clr-namespace:Controls.Converters">
	<converters:StringToResourceConverter x:Key="StringToResourceConverter" />
	<!--
		<PathGeometry x:Key="ReflectionGeometry">
		<PathFigure IsClosed="True" StartPoint="98.999,45.499">
		<BezierSegment Point1="98.999,54.170" Point2="89.046,52.258" Point3="85.502,51.029" />
		<BezierSegment IsSmoothJoin="True" Point1="75.860,47.685" Point2="69.111,45.196" Point3="50.167,45.196" />
		<BezierSegment Point1="30.805,45.196" Point2="20.173,47.741" Point3="10.665,51.363" />
		<BezierSegment IsSmoothJoin="True" Point1="7.469,52.580" Point2="1.000,53.252" Point3="1.000,44.999" />
		<BezierSegment Point1="1.000,39.510" Point2="0.884,39.227" Point3="2.519,34.286" />
		<BezierSegment IsSmoothJoin="True" Point1="9.106,14.370" Point2="27.875,0" Point3="50,0" />
		<BezierSegment Point1="72.198,0" Point2="91.018,14.466" Point3="97.546,34.485" />
		<BezierSegment IsSmoothJoin="True" Point1="99.139,39.369" Point2="98.999,40.084" Point3="98.999,45.499" />
		</PathFigure>
		</PathGeometry>
		<TransformGroup x:Key="ReflectionTransform">
		<ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1" ScaleY="1.997" />
		<TranslateTransform X="0" Y="0.5" />
		</TransformGroup>
		<TransformGroup x:Key="RefractionTransform">
		<ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5" />
		<TranslateTransform X="0.02" Y="0.3" />
		</TransformGroup>
		<RadialGradientBrush x:Key="RefractionLayerBrush" GradientOrigin="0.496,1.052">
		<RadialGradientBrush.RelativeTransform>
		<TransformGroup>
		<ScaleTransform CenterX="0.5" CenterY="0.5" ScaleX="1.5" ScaleY="1.5" />
		<TranslateTransform X="0.02" Y="0.3" />
		</TransformGroup>
		</RadialGradientBrush.RelativeTransform>
		<GradientStop Offset="1" Color="#00000000" />
		<GradientStop Offset="0.4" Color="#FFFFFFFF" />
		</RadialGradientBrush>
		<RadialGradientBrush x:Key="ReflectionBrush" GradientOrigin="0.498,0.526" RelativeTransform="{StaticResource ReflectionTransform}">
		<GradientStop Offset="1" Color="#FFFFFFFF" />
		<GradientStop Offset="0.85" Color="#92FFFFFF" />
		<GradientStop Offset="0" Color="#00000000" />
		</RadialGradientBrush>
		<RadialGradientBrush x:Key="RefractionLayerPressed" GradientOrigin="0.496,1.052" RelativeTransform="{StaticResource RefractionTransform}">
		<GradientStop Offset="1" Color="#00000000" />
		<GradientStop Offset="0.3" Color="#FFFFFFFF" />
		</RadialGradientBrush>
		<RadialGradientBrush x:Key="ReflectionLayerPressed" GradientOrigin="0.498,0.526" RelativeTransform="{StaticResource ReflectionTransform}">
		<GradientStop Offset="1" Color="#CCFFFFFF" />
		<GradientStop Offset="0.85" Color="#66FFFFFF" />
		<GradientStop Offset="0" Color="#00000000" />
		</RadialGradientBrush>
		<RadialGradientBrush x:Key="RefractionLayerMouseOver" GradientOrigin="0.496,1.052" RelativeTransform="{StaticResource RefractionTransform}">
		<GradientStop Offset="1" Color="#00000000" />
		<GradientStop Offset="0.45" Color="#FFFFFFFF" />
		</RadialGradientBrush>
		<RadialGradientBrush x:Key="ReflectionLayerMouseOver" GradientOrigin="0.498,0.526" RelativeTransform="{StaticResource ReflectionTransform}">
		<GradientStop Offset="1" Color="#FFFFFFFF" />
		<GradientStop Offset="0.85" Color="#BBFFFFFF" />
		<GradientStop Offset="0" Color="#00000000" />
		</RadialGradientBrush>
	-->

	<Style x:Key="RibbonPopup" TargetType="{x:Type Popup}">
		<Setter Property="AllowsTransparency" Value="True" />
		<Setter Property="PopupAnimation" Value="Fade" />
		<Setter Property="Placement" Value="RelativePoint" />
		<Setter Property="VerticalOffset" Value="20" />
		<Setter Property="HorizontalOffset" Value="-5" />
		<Setter Property="StaysOpen" Value="False" />
	</Style>
	<Style x:Key="RibbonButton" TargetType="{x:Type ToggleButton}">
		<Setter Property="Width" Value="40" />
		<Setter Property="Height" Value="40" />
		<Setter Property="SnapsToDevicePixels" Value="True" />
		<Setter Property="OverridesDefaultStyle" Value="True" />
		<Setter Property="Background" Value="{DynamicResource BackgroundBrush}" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ToggleButton}">
					<Grid x:Name="round">
						<Ellipse x:Name="ellipse" Fill="{TemplateBinding Background}" Stroke="{DynamicResource WindowBorderBrush}" StrokeThickness="0" />
						<!--
							<Ellipse x:Name="RefractionLayer" Fill="{StaticResource RefractionLayerBrush}" />
							<Path x:Name="ReflectionLayer" VerticalAlignment="Top" Data="{StaticResource ReflectionGeometry}" Fill="{StaticResource ReflectionBrush}" Stretch="Fill">
							<Path.RenderTransform>
							<ScaleTransform ScaleY="0.5" />
							</Path.RenderTransform>
							</Path>
						-->
						<Rectangle Height="26" Width="32" Margin="5" HorizontalAlignment="Center" VerticalAlignment="Center" Fill="{Binding ImageSource, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ribbon:RibbonButton}, Converter={StaticResource StringToResourceConverter}}" />
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger Property="IsMouseOver" Value="True">
							<Setter Property="Background" Value="{DynamicResource HighlightedBackgoundBrush}" />
							<!--
								<Setter TargetName="RefractionLayer" Property="Fill" Value="{StaticResource RefractionLayerMouseOver}" />
								<Setter TargetName="ReflectionLayer" Property="Fill" Value="{StaticResource ReflectionLayerMouseOver}" />
							-->
						</Trigger>
						<Trigger Property="IsPressed" Value="True">
							<Setter Property="Background" Value="{DynamicResource PressedBackgroundBrush}" />
							<!--
								<Setter TargetName="RefractionLayer" Property="Fill" Value="{StaticResource RefractionLayerPressed}" />
								<Setter TargetName="ReflectionLayer" Property="Fill" Value="{StaticResource ReflectionLayerPressed}" />
							-->
						</Trigger>
						<Trigger Property="IsChecked" Value="True">
							<Setter TargetName="ellipse" Property="StrokeThickness" Value="1" />
							<Setter Property="Background" Value="{DynamicResource HighlightedBackgoundBrush}" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	<Style TargetType="{x:Type ribbon:RibbonButton}">
		<Setter Property="Width" Value="40" />
		<Setter Property="Height" Value="40" />
		<Setter Property="Focusable" Value="False" />
		<Setter Property="HorizontalAlignment" Value="Left" />
		<Setter Property="VerticalAlignment" Value="Top" />
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type ribbon:RibbonButton}">
					<Grid>
						<ToggleButton x:Name="button" Content="{TemplateBinding Content}" Style="{StaticResource RibbonButton}" IsChecked="{Binding IsOpened, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" />
						<loc:RibbonPopup x:Name="popup" DataContext="{TemplateBinding DataContext}" IsOpen="{Binding IsOpened, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" PlacementTarget="{Binding ElementName=button}" Style="{StaticResource RibbonPopup}">
							<Grid>
								<!--
									<Path Fill="{DynamicResource BaseWindowBackgroundBrush}" Stroke="{DynamicResource WindowBorderBrush}" StrokeThickness="1">
									<Path.Data>
									<CombinedGeometry GeometryCombineMode="Exclude">
									<CombinedGeometry.Geometry1>
									<RectangleGeometry RadiusX="5" RadiusY="5" Rect="0,0,200,400" />
									</CombinedGeometry.Geometry1>
									<CombinedGeometry.Geometry2>
									<EllipseGeometry Center="25,0" RadiusX="20" RadiusY="20" />
									</CombinedGeometry.Geometry2>
									</CombinedGeometry>
									</Path.Data>
									</Path>
								-->
								<Border Background="{DynamicResource BackgroundBrush}" BorderBrush="{DynamicResource WindowBorderBrush}" BorderThickness="1" CornerRadius="5" Padding="0,20,0,0">
									<ContentPresenter />
								</Border>
								<ToggleButton Width="{Binding Width, ElementName=button}" Height="{Binding Height, ElementName=button}" Margin="5,-20" HorizontalAlignment="Left" VerticalAlignment="Top" Content="{TemplateBinding Content}" IsChecked="{Binding IsOpened, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" Style="{StaticResource RibbonButton}" />
							</Grid>
						</loc:RibbonPopup>
					</Grid>
					<ControlTemplate.Triggers>
						<Trigger SourceName="popup" Property="IsOpen" Value="True">
							<Setter TargetName="button" Property="IsHitTestVisible" Value="False" />
						</Trigger>
					</ControlTemplate.Triggers>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>

</ResourceDictionary>