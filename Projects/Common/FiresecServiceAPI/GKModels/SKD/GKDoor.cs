using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using Common;
using Infrustructure.Plans.Interfaces;
using FiresecClient;
using System.Linq;
using System.Diagnostics;

namespace FiresecAPI.GK
{
	/// <summary>
	/// Точка доступа ГК
	/// </summary>
	public class GKDoor : GKBase, IPlanPresentable
	{
		public GKDoor()
		{
			PlanElementUIDs = new List<Guid>();
			OpenRegimeLogic = new GKLogic();
			NormRegimeLogic = new GKLogic();
			CloseRegimeLogic = new GKLogic();
			Delay = 2;
			Hold = 20;
			PimEnter = new GKPim();
			PimEnter.IsAutoGenerated = true;
			PimEnter.DoorUID = UID;
			PimEnter.UID = GuidHelper.CreateOn(UID, 0);
			PimExit = new GKPim();
			PimExit.IsAutoGenerated = true;
			PimExit.DoorUID = UID;
			PimExit.UID = GuidHelper.CreateOn(UID, 1);
		}

		public override void Update(GKDevice device)
		{
			OpenRegimeLogic.GetAllClauses().FindAll(x => x.Devices.Contains(device)).ForEach(y => y.Devices.Remove(device));
			NormRegimeLogic.GetAllClauses().FindAll(x => x.Devices.Contains(device)).ForEach(y => y.Devices.Remove(device));
			CloseRegimeLogic.GetAllClauses().FindAll(x => x.Devices.Contains(device)).ForEach(y => y.Devices.Remove(device));

			EnterDeviceUID = EnterDeviceUID == device.UID ? Guid.Empty : EnterDeviceUID;
			ExitDeviceUID = ExitDeviceUID == device.UID ? Guid.Empty : ExitDeviceUID;
			EnterButtonUID = EnterButtonUID == device.UID ? Guid.Empty : EnterButtonUID;
			ExitButtonUID = ExitButtonUID == device.UID ? Guid.Empty : ExitButtonUID;
			LockDeviceUID = LockDeviceUID == device.UID ? Guid.Empty : LockDeviceUID;
			LockDeviceExitUID = LockDeviceExitUID == device.UID ? Guid.Empty : LockDeviceExitUID;
			LockControlDeviceUID = LockControlDeviceUID == device.UID ? Guid.Empty : LockControlDeviceUID;
			LockControlDeviceExitUID = LockControlDeviceExitUID == device.UID ? Guid.Empty : LockControlDeviceExitUID;

			UnLinkObject(device);
			OnChanged();
		}

		public override void Update(GKDirection direction)
		{
			OpenRegimeLogic.GetAllClauses().FindAll(x => x.Directions.Contains(direction)).ForEach(y => { y.Directions.Remove(direction); y.DirectionUIDs.Remove(direction.UID); });
			NormRegimeLogic.GetAllClauses().FindAll(x => x.Directions.Contains(direction)).ForEach(y => { y.Directions.Remove(direction); y.DirectionUIDs.Remove(direction.UID); });
			CloseRegimeLogic.GetAllClauses().FindAll(x => x.Directions.Contains(direction)).ForEach(y => { y.Directions.Remove(direction); y.DirectionUIDs.Remove(direction.UID); });
			UnLinkObject(direction);
			OnChanged();
		}

		public override void Invalidate()
		{
			UpdateLogic();
			OpenRegimeLogic.GetObjects().ForEach(x =>
			{
				if (!InputDependentElements.Contains(x) && x != this)
					InputDependentElements.Add(x);
				if (!x.OutDependentElements.Contains(this) && x != this)
					x.OutDependentElements.Add(this);
			});
			NormRegimeLogic.GetObjects().ForEach(x =>
			{
				if (!InputDependentElements.Contains(x) && x != this)
					InputDependentElements.Add(x);
				if (!x.OutDependentElements.Contains(this) && x != this)
					x.OutDependentElements.Add(this);
			});
			CloseRegimeLogic.GetObjects().ForEach(x =>
			{
				if (!InputDependentElements.Contains(x) && x != this)
					InputDependentElements.Add(x);
				if (!x.OutDependentElements.Contains(this) && x != this)
					x.OutDependentElements.Add(this);
			});

			if (EnterDeviceUID != Guid.Empty)
			{
				EnterDevice = GKManager.Devices.Find(x => x.UID == EnterDeviceUID);
				if (EnterDevice == null)
					EnterDeviceUID = Guid.Empty;
				else
				{
					EnterDevice.Door = this;
					if (!EnterDevice.OutDependentElements.Contains(this))
						EnterDevice.OutDependentElements.Add(this);
					if (!InputDependentElements.Contains(EnterDevice))
						InputDependentElements.Add(EnterDevice);
				}
			}

			if (ExitDeviceUID != Guid.Empty)
			{
				ExitDevice = GKManager.Devices.Find(x => x.UID == ExitDeviceUID);
				if (ExitDevice == null)
					ExitDeviceUID = Guid.Empty;
				else
				{
					ExitDevice.Door = this;
					if (!ExitDevice.OutDependentElements.Contains(this))
						ExitDevice.OutDependentElements.Add(this);
					if (!InputDependentElements.Contains(ExitDevice))
						InputDependentElements.Add(ExitDevice);
				}
			}

			if (DoorType == GKDoorType.AirlockBooth)
			{
				if (EnterButtonUID != Guid.Empty)
				{
					EnterButton = GKManager.Devices.Find(x => x.UID == EnterButtonUID);
					if (EnterButton == null)
						EnterButtonUID = Guid.Empty;
					else
					{
						EnterButton.Door = this;
						if (!EnterButton.OutDependentElements.Contains(this))
							EnterButton.OutDependentElements.Add(this);
						if (!InputDependentElements.Contains(EnterButton))
							InputDependentElements.Add(EnterButton);
					}
				}
				if (ExitButtonUID != Guid.Empty)
				{
					ExitButton = GKManager.Devices.Find(x => x.UID == ExitButtonUID);
					if (ExitButton == null)
						ExitButtonUID = Guid.Empty;
					else
					{
						ExitButton.Door = this;
						if (!ExitButton.OutDependentElements.Contains(this))
							ExitButton.OutDependentElements.Add(this);
						if (!InputDependentElements.Contains(ExitButton))
							InputDependentElements.Add(ExitButton);
					}
				}
				if (LockControlDeviceUID != Guid.Empty)
				{
					LockControlDevice = GKManager.Devices.Find(x => x.UID == LockControlDeviceUID);
					if (LockControlDevice == null)
						LockControlDeviceUID = Guid.Empty;
					else
					{
						LockControlDevice.Door = this;
						if (!LockControlDevice.OutDependentElements.Contains(this))
							LockControlDevice.OutDependentElements.Add(this);
						if (!InputDependentElements.Contains(LockControlDevice))
							InputDependentElements.Add(LockControlDevice);
					}
				}
				if (LockControlDeviceExitUID != Guid.Empty)
				{
					LockControlDeviceExit = GKManager.Devices.Find(x => x.UID == LockControlDeviceExitUID);
					if (LockControlDeviceExit == null)
						LockControlDeviceExitUID = Guid.Empty;
					else
					{
						LockControlDeviceExit.Door = this;
						if (!LockControlDeviceExit.OutDependentElements.Contains(this))
							LockControlDeviceExit.OutDependentElements.Add(this);
						if (!InputDependentElements.Contains(LockControlDeviceExit))
							InputDependentElements.Add(LockControlDeviceExit);
					}
				}
			}
			if (DoorType == GKDoorType.AirlockBooth || DoorType == GKDoorType.Barrier || DoorType == GKDoorType.Turnstile)
			{
				if (DoorType == GKDoorType.Barrier || DoorType == GKDoorType.Turnstile)
				{
					EnterButton = null;
					EnterButtonUID = Guid.Empty;
					ExitButton = null;
					ExitButtonUID = Guid.Empty;
					LockControlDeviceExit = null;
					LockControlDeviceExitUID = Guid.Empty;

					if (DoorType == GKDoorType.Barrier)
					{
						LockControlDevice = null;
						LockControlDeviceUID = Guid.Empty;
					}
				}
				if (LockDeviceUID != Guid.Empty)
				{
					LockDevice = GKManager.Devices.Find(x => x.UID == LockDeviceUID);
					if (LockDevice == null)
						LockDeviceUID = Guid.Empty;
					else
					{
						LockDevice.Door = this;
						if (!LockDevice.OutDependentElements.Contains(this))
							LockDevice.OutDependentElements.Add(this);
						if (!InputDependentElements.Contains(LockDevice))
							InputDependentElements.Add(LockDevice);
					}
				}
				if (LockDeviceExitUID != Guid.Empty)
				{
					LockDeviceExit = GKManager.Devices.Find(x => x.UID == LockDeviceExitUID);
					if (LockDeviceExit == null)
						LockDeviceExitUID = Guid.Empty;
					else
					{
						LockDeviceExit.Door = this;
						if (!LockDeviceExit.OutDependentElements.Contains(this))
							LockDeviceExit.OutDependentElements.Add(this);
						if (!InputDependentElements.Contains(LockDeviceExit))
							InputDependentElements.Add(LockDeviceExit);
					}
				}
			}

			if (DoorType == GKDoorType.OneWay || DoorType == GKDoorType.TwoWay)
			{
				EnterButton = null;
				EnterButtonUID = Guid.Empty;
				ExitButton = null;
				ExitButtonUID = Guid.Empty;
				LockControlDeviceExit = null;
				LockControlDeviceExitUID = Guid.Empty;
				LockDeviceExit = null;
				LockDeviceExitUID = Guid.Empty;

				if (LockDeviceUID != Guid.Empty)
				{
					LockDevice = GKManager.Devices.Find(x => x.UID == LockDeviceUID);
					if (LockDevice == null)
						LockDeviceUID = Guid.Empty;
					else
					{
						LockDevice.Door = this;
						if (!LockDevice.OutDependentElements.Contains(this))
							LockDevice.OutDependentElements.Add(this);
						if (!InputDependentElements.Contains(LockDevice))
							InputDependentElements.Add(LockDevice);
					}
				}

				if (LockControlDeviceUID != Guid.Empty)
				{
					LockControlDevice = GKManager.Devices.Find(x => x.UID == LockControlDeviceUID);
					if (LockControlDevice == null)
						LockControlDeviceUID = Guid.Empty;
					else
					{
						LockControlDevice.Door = this;
						if (!LockControlDevice.OutDependentElements.Contains(this))
							LockControlDevice.OutDependentElements.Add(this);
						if (!InputDependentElements.Contains(LockControlDevice))
							InputDependentElements.Add(LockControlDevice);
					}
				}
			}
		}

		public override void UpdateLogic()
		{
			GKManager.DeviceConfiguration.InvalidateInputObjectsBaseLogic(this, OpenRegimeLogic);
			GKManager.DeviceConfiguration.InvalidateInputObjectsBaseLogic(this, NormRegimeLogic);
			GKManager.DeviceConfiguration.InvalidateInputObjectsBaseLogic(this, CloseRegimeLogic);
		}
		

		[XmlIgnore]
		public GKPim PimEnter { get; private set; }

		[XmlIgnore]
		public GKPim PimExit { get; private set; }

		bool _isLogicOnKau;
		[XmlIgnore]
		public override bool IsLogicOnKau
		{
			get { return _isLogicOnKau; }
			set
			{
				_isLogicOnKau = value;
				if (PimEnter != null)
					PimEnter.IsLogicOnKau = value;
				if (PimExit != null)
					PimExit.IsLogicOnKau = value;
			}
		}

		[XmlIgnore]
		public override string PresentationName
		{
			get
			{
				var presentationName = No + "." + Name;
				if (PimEnter != null)
					PimEnter.Name = presentationName + " (вход)";
				if (PimExit != null)
					PimExit.Name = presentationName + " (выход)";
				return presentationName;
			}
		}
		[XmlIgnore]
		public override string ImageSource
		{
			get { return "/Controls;component/Images/Door.png"; }
		}
		[XmlIgnore]
		public GKDevice EnterDevice { get; set; }
		[XmlIgnore]
		public GKDevice ExitDevice { get; set; }
		[XmlIgnore]
		public GKDevice EnterButton { get; set; }
		[XmlIgnore]
		public GKDevice ExitButton { get; set; }
		[XmlIgnore]
		public GKDevice LockDevice { get; set; }
		[XmlIgnore]
		public GKDevice LockDeviceExit { get; set; }
		[XmlIgnore]
		public GKDevice LockControlDevice { get; set; }
		[XmlIgnore]
		public GKDevice LockControlDeviceExit { get; set; }

		/// <summary>
		/// Тип ТД
		/// </summary>
		[DataMember]
		public GKDoorType DoorType { get; set; }

		/// <summary>
		/// Режим запрета повторного прохода
		/// </summary>
		[DataMember]
		public bool AntipassbackOn { get; set; }

		/// <summary>
		/// Задержка
		/// </summary>
		[DataMember]
		public int Delay { get; set; }

		/// <summary>
		/// Время удержания
		/// </summary>
		[DataMember]
		public int Hold { get; set; }

		/// <summary>
		/// Минимальный индивидуальный уровень на вход
		/// </summary>
		[DataMember]
		public int EnterLevel { get; set; }

		/// <summary>
		/// Идентификатор устройства на вход
		/// </summary>
		[DataMember]
		public Guid EnterDeviceUID { get; set; }

		/// <summary>
		/// Идентификатор устройства на выход
		/// </summary>
		[DataMember]
		public Guid ExitDeviceUID { get; set; }

		/// <summary>
		/// Идентификатор кнопки на вход
		/// </summary>
		[DataMember]
		public Guid EnterButtonUID { get; set; }

		/// <summary>
		/// Идентификатор кнопки на выход
		/// </summary>
		[DataMember]
		public Guid ExitButtonUID { get; set; }

		/// <summary>
		/// Идентификатор устройства Замок
		/// </summary>
		[DataMember]
		public Guid LockDeviceUID { get; set; }

		/// <summary>
		/// Идентификатор устройства Замок на выход
		/// </summary>
		[DataMember]
		public Guid LockDeviceExitUID { get; set; }

		/// <summary>
		/// Идентификатор устройства Датчик контроля двери
		/// </summary>
		[DataMember]
		public Guid LockControlDeviceUID { get; set; }

		/// <summary>
		/// Идентификатор устройства Датчик контроля двери на выход
		/// </summary>
		[DataMember]
		public Guid LockControlDeviceExitUID { get; set; }

		/// <summary>
		/// Идентификатор зоны входа
		/// </summary>
		[DataMember]
		public Guid EnterZoneUID { get; set; }

		/// <summary>
		/// Идентификатор зоны выхода
		/// </summary>
		[DataMember]
		public Guid ExitZoneUID { get; set; }

		/// <summary>
		/// Логика перевода ТД в состояние Всегда Открыто
		/// </summary>
		[DataMember]
		public GKLogic OpenRegimeLogic { get; set; }

		/// <summary>
		/// Логика перевода ТД в состояние Норма
		/// </summary>
		[DataMember]
		public GKLogic NormRegimeLogic { get; set; }

		/// <summary>
		/// Логика перевода ТД в состояние Всегда Закрыто
		/// </summary>
		[DataMember]
		public GKLogic CloseRegimeLogic { get; set; }

		[XmlIgnore]
		public override GKBaseObjectType ObjectType { get { return GKBaseObjectType.Door; } }

		[DataMember]
		public List<Guid> PlanElementUIDs { get; set; }

		/// <summary>
		/// Разрещить множественную визуализация на плане
		/// </summary>
		[DataMember]
		public bool AllowMultipleVizualization { get; set; }
	}
}