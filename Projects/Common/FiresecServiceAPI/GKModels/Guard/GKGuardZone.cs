using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Common;
using Infrustructure.Plans.Interfaces;
using System.Xml.Serialization;

namespace FiresecAPI.GK
{
	/// <summary>
	/// Охранная зона ГК
	/// </summary>
	[DataContract]
	public class GKGuardZone : GKBase, IPlanPresentable
	{
		public GKGuardZone()
		{
			PlanElementUIDs = new List<Guid>();
			GuardZoneDevices = new List<GKGuardZoneDevice>();
			Pim = new GKPim();
			Pim.IsAutoGenerated = true;
			Pim.GuardZoneUID = UID;
			Pim.UID = GuidHelper.CreateOn(UID, 0);
		}

		bool _isLogicOnKau;
		[XmlIgnore]
		public override bool IsLogicOnKau
		{
			get { return _isLogicOnKau; }
			set
			{
				_isLogicOnKau = value;
				if (Pim != null)
					Pim.IsLogicOnKau = value;
			}
		}

		[XmlIgnore]
		public GKPim Pim { get; private set; }

		[XmlIgnore]
		public override GKBaseObjectType ObjectType { get { return GKBaseObjectType.GuardZone; } }

		[XmlIgnore]
		public List<Guid> PlanElementUIDs { get; set; }

		/// <summary>
		/// Минимальный уровень на постановку
		/// </summary>
		[DataMember]
		public int SetGuardLevel { get; set; }

		/// <summary>
		/// Минимальный уровень на снятие
		/// </summary>
		[DataMember]
		public int ResetGuardLevel { get; set; }

		/// <summary>
		/// Задержка на постановку
		/// </summary>
		[DataMember]
		public int SetDelay { get; set; }

		/// <summary>
		/// Задержка на снятие
		/// </summary>
		[DataMember]
		public int ResetDelay { get; set; }

		/// <summary>
		/// Задержка на вызов тревоги
		/// </summary>
		[DataMember]
		public int AlarmDelay { get; set; }

		/// <summary>
		/// Особо охраняемая
		/// </summary>
		[DataMember]
		public bool IsExtraProtected { get; set; }

		/// <summary>
		/// Устройства охранной зоны
		/// </summary>
		[DataMember]
		public List<GKGuardZoneDevice> GuardZoneDevices { get; set; }

		[XmlIgnore]
		public override string PresentationName
		{
			get
			{
				var presentationName = No + "." + Name;
				if (Pim != null)
					Pim.Name = presentationName;
				return presentationName;
			}
		}

		public List<Guid> GetCodeUids()
		{
			var codeUids = new List<Guid>();
			foreach (var guardZoneDevice in GuardZoneDevices)
			{
				codeUids.AddRange(guardZoneDevice.CodeReaderSettings.SetGuardSettings.CodeUIDs);
				codeUids.AddRange(guardZoneDevice.CodeReaderSettings.ResetGuardSettings.CodeUIDs);
				codeUids.AddRange(guardZoneDevice.CodeReaderSettings.ChangeGuardSettings.CodeUIDs);
				codeUids.AddRange(guardZoneDevice.CodeReaderSettings.AlarmSettings.CodeUIDs);
			}
			return codeUids;
		}

		public bool IsGlobalOnlyZone()
		{
			var codeDevices = GuardZoneDevices.FindAll(x => x.Device.DriverType == GKDriverType.RSR2_CodeReader || x.Device.DriverType == GKDriverType.RSR2_CardReader);
			foreach (var codeDevice in codeDevices)
			{
				if (codeDevice.CodeReaderSettings.AlarmSettings.CodeUIDs.Count > 0 && codeDevice.CodeReaderSettings.AlarmSettings.AccessLevel > 0)
					return true;
				if (codeDevice.CodeReaderSettings.AutomaticOffSettings.CodeUIDs.Count > 0 && codeDevice.CodeReaderSettings.AutomaticOffSettings.AccessLevel > 0)
					return true;
				if (codeDevice.CodeReaderSettings.AutomaticOnSettings.CodeUIDs.Count > 0 && codeDevice.CodeReaderSettings.AutomaticOnSettings.AccessLevel > 0)
					return true;
				if (codeDevice.CodeReaderSettings.ChangeGuardSettings.CodeUIDs.Count > 0 && codeDevice.CodeReaderSettings.ChangeGuardSettings.AccessLevel > 0)
					return true;
				if (codeDevice.CodeReaderSettings.ResetGuardSettings.CodeUIDs.Count > 0 && codeDevice.CodeReaderSettings.ResetGuardSettings.AccessLevel > 0)
					return true;
				if (codeDevice.CodeReaderSettings.SetGuardSettings.CodeUIDs.Count > 0 && codeDevice.CodeReaderSettings.SetGuardSettings.AccessLevel > 0)
					return true;
				if (codeDevice.CodeReaderSettings.StartSettings.CodeUIDs.Count > 0 && codeDevice.CodeReaderSettings.StartSettings.AccessLevel > 0)
					return true;
				if (codeDevice.CodeReaderSettings.StopSettings.CodeUIDs.Count > 0 && codeDevice.CodeReaderSettings.StopSettings.AccessLevel > 0)
					return true;
			}
			return false;
		}
	}
}