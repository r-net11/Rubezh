using System;
using System.Collections.Generic;
using System.Linq;
using Common;
using FiresecAPI.GK;

namespace GKProcessor
{
	public class PumpStationCreator
	{
		CommonDatabase Database;
		GKPumpStation PumpStation;
		List<GKDevice> FirePumpDevices = new List<GKDevice>();
		List<GKDevice> JockeyPumpDevices = new List<GKDevice>();
		List<PumpDelay> PumpDelays = new List<PumpDelay>();
		DatabaseType DatabaseType;

		public PumpStationCreator(CommonDatabase database, GKPumpStation pumpStation, DatabaseType dataBaseType)
		{
			Database = database;
			PumpStation = pumpStation;
			DatabaseType = dataBaseType;

			foreach (var nsDevice in pumpStation.NSDevices)
			{
				if (nsDevice.DriverType == GKDriverType.RSR2_Bush_Fire)
					FirePumpDevices.Add(nsDevice);
				if (nsDevice.DriverType == GKDriverType.RSR2_Bush_Jokey)
					JockeyPumpDevices.Add(nsDevice);
			}
		}

		public void Create()
		{
			CreateDelays();
			SetCrossReferences();
			CreateDelaysLogic();
			SetFirePumpDevicesLogic();
			SetJockeyPumpLogic();
			CreatePim();
		}

		void CreateDelays()
		{
			for (int i = 1; i < FirePumpDevices.Count; i++)
			{
				var pumpDevice = FirePumpDevices[i];
				var delay = new GKDelay()
				{
					Name = "Задержка пуска ШУН " + pumpDevice.DottedAddress,
					DelayTime = (ushort)PumpStation.NSDeltaTime,
					Hold = 2,
					DelayRegime = DelayRegime.Off,
					IsAutoGenerated = true,
					PumpStationUID = PumpStation.UID
				};
				delay.UID = Guid.NewGuid(); //GuidHelper.CreateOn(pumpDevice.UID, 0);

				var pumpDelay = new PumpDelay
				{
					Delay = delay,
					Device = pumpDevice
				};
				PumpDelays.Add(pumpDelay);

				var delayDescriptor = new DelayDescriptor(delay);
				Database.Descriptors.Add(delayDescriptor);
			}
		}

		void CreateDelaysLogic()
		{
			for (int i = 0; i < PumpDelays.Count; i++)
			{
				var pumpDelay = PumpDelays[i];
				var delayDescriptor = Database.Descriptors.FirstOrDefault(x => x.DescriptorType == DescriptorType.Delay && x.GKBase.UID == pumpDelay.Delay.UID);
				if (delayDescriptor == null)
					return;

				delayDescriptor.Formula = new FormulaBuilder();
				AddCountFirePumpDevicesFormula(delayDescriptor.Formula);
				if (i > 0)
				{
					var prevDelay = PumpDelays[i - 1];
					delayDescriptor.Formula.AddGetBit(GKStateBit.On, prevDelay.Delay);
					delayDescriptor.Formula.Add(FormulaOperationType.AND);
				}

				delayDescriptor.Formula.AddGetBit(GKStateBit.On, PumpStation);
				delayDescriptor.Formula.Add(FormulaOperationType.AND);
				delayDescriptor.Formula.AddPutBit(GKStateBit.TurnOn_InAutomatic, pumpDelay.Delay);

				delayDescriptor.Formula.AddGetBit(GKStateBit.Off, PumpStation);
				delayDescriptor.Formula.AddPutBit(GKStateBit.TurnOff_InAutomatic, pumpDelay.Delay);

				delayDescriptor.Formula.Add(FormulaOperationType.END);
				delayDescriptor.IsFormulaGeneratedOutside = true;
			}
		}

		void SetFirePumpDevicesLogic()
		{
			for (int i = 0; i < FirePumpDevices.Count; i++)
			{
				var pumpDevice = FirePumpDevices[i];
				var pumpDescriptor = Database.Descriptors.FirstOrDefault(x => x.DescriptorType == DescriptorType.Device && x.GKBase.UID == pumpDevice.UID);
				if (pumpDescriptor != null)
				{
					pumpDescriptor.Formula = new FormulaBuilder();
					AddCountFirePumpDevicesFormula(pumpDescriptor.Formula);
					if (i > 0)
					{
						var pumpDelay = PumpDelays.FirstOrDefault(x => x.Device.UID == pumpDevice.UID);
						pumpDescriptor.Formula.AddGetBit(GKStateBit.On, pumpDelay.Delay);
						pumpDescriptor.Formula.Add(FormulaOperationType.AND);
					}

					if (pumpDevice.NSLogic.OnClausesGroup.Clauses.Count > 0)
					{
						pumpDescriptor.Formula.AddClauseFormula(pumpDevice.NSLogic.OnClausesGroup);
						pumpDescriptor.Formula.Add(FormulaOperationType.AND);
					}

					pumpDescriptor.Formula.AddGetBit(GKStateBit.On, pumpDevice);
					pumpDescriptor.Formula.AddGetBit(GKStateBit.TurningOn, pumpDevice);
					pumpDescriptor.Formula.Add(FormulaOperationType.OR);
					pumpDescriptor.Formula.AddGetBit(GKStateBit.Failure, pumpDevice);
					pumpDescriptor.Formula.Add(FormulaOperationType.OR);
					pumpDescriptor.Formula.Add(FormulaOperationType.COM);
					pumpDescriptor.Formula.Add(FormulaOperationType.AND, comment: "Запрет на включение, если насос включен и не включается");

					pumpDescriptor.Formula.AddGetBit(GKStateBit.On, PumpStation);
					pumpDescriptor.Formula.Add(FormulaOperationType.AND);
					pumpDescriptor.Formula.AddPutBit(GKStateBit.TurnOn_InAutomatic, pumpDevice);

					pumpDescriptor.Formula.AddGetBit(GKStateBit.Off, PumpStation);
					pumpDescriptor.Formula.AddPutBit(GKStateBit.TurnOff_InAutomatic, pumpDevice);

					pumpDescriptor.Formula.Add(FormulaOperationType.END);
					pumpDescriptor.IsFormulaGeneratedOutside = true;
				}
			}
		}

		void SetJockeyPumpLogic()
		{
			if (JockeyPumpDevices.Count > 0)
			{
				foreach (var jockeyPumpDevice in JockeyPumpDevices)
				{

					var jnDescriptor = Database.Descriptors.FirstOrDefault(x => x.DescriptorType == DescriptorType.Device && x.GKBase.UID == jockeyPumpDevice.UID);
					if (jnDescriptor != null)
					{
						jnDescriptor.Formula = new FormulaBuilder();
						jnDescriptor.Formula.AddGetBit(GKStateBit.On, PumpStation);
						jnDescriptor.Formula.AddGetBit(GKStateBit.TurningOn, PumpStation);
						jnDescriptor.Formula.Add(FormulaOperationType.OR);
						jnDescriptor.Formula.AddPutBit(GKStateBit.SetRegime_Manual, jockeyPumpDevice);
						jnDescriptor.Formula.Add(FormulaOperationType.END);
						jnDescriptor.IsFormulaGeneratedOutside = true;
					}
				}
			}
		}

		void AddCountFirePumpDevicesFormula(FormulaBuilder formula)
		{
			var inputPumpsCount = 0;
			foreach (var firePumpDevice in FirePumpDevices)
			{
				formula.AddGetBit(GKStateBit.TurningOn, firePumpDevice);
				formula.AddGetBit(GKStateBit.On, firePumpDevice);
				formula.Add(FormulaOperationType.OR);
				if (inputPumpsCount > 0)
				{
					formula.Add(FormulaOperationType.ADD);
				}
				inputPumpsCount++;
			}
			formula.Add(FormulaOperationType.CONST, 0, (ushort)PumpStation.NSPumpsCount, comment: "Количество основных пожарных насосов");
			formula.Add(FormulaOperationType.LT);
		}

		void CreatePim()
		{
			//PumpStation.Pim.GetDataBaseParent();
			PumpStation.Pim.IsLogicOnKau = PumpStation.IsLogicOnKau;
			var pimDescriptor = new PimDescriptor(PumpStation.Pim);
			Database.Descriptors.Add(pimDescriptor);

			pimDescriptor.Formula = new FormulaBuilder();
			var inputDevices = new List<GKBase>();
			inputDevices.AddRange(PumpStation.ClauseInputDevices);
			foreach (var nsDevice in PumpStation.NSDevices)
			{
				if (!inputDevices.Contains(nsDevice))
					inputDevices.Add(nsDevice);
			}
			foreach (var inputDevice in inputDevices)
			{
				PumpStation.Pim.LinkGKBases(inputDevice);
			}
			for (int i = 0; i < inputDevices.Count; i++)
			{
				var nsDevice = inputDevices[i];
				pimDescriptor.Formula.AddGetBit(GKStateBit.Failure, nsDevice);
				if (i > 0)
				{
					pimDescriptor.Formula.Add(FormulaOperationType.OR);
				}
			}
			pimDescriptor.Formula.AddPutBit(GKStateBit.Failure, PumpStation.Pim);

			pimDescriptor.Formula.Add(FormulaOperationType.END);
			pimDescriptor.IsFormulaGeneratedOutside = true;
		}

		void SetCrossReferences()
		{
			foreach (var nsDevice in PumpStation.NSDevices)
			{
				nsDevice.LinkGKBases(PumpStation);
			}

			foreach (var pumpDelay in PumpDelays)
			{
				pumpDelay.Delay.LinkGKBases(PumpStation);
				foreach (var pumpDevice in FirePumpDevices)
				{
					pumpDelay.Delay.LinkGKBases(pumpDevice);
				}
			}

			foreach (var nsDevice in PumpStation.NSDevices)
			{
				foreach (var pumpDelay in PumpDelays)
				{
					if (pumpDelay.Device.UID == nsDevice.UID)
					{
						nsDevice.LinkGKBases(pumpDelay.Delay);
					}
				}
			}

			for (int i = 0; i < PumpDelays.Count; i++)
			{
				GKDelay prevDelay = null;
				GKDelay currentDelay = PumpDelays[i].Delay;
				GKDelay nextDelay = null;
				if (i > 0)
					prevDelay = PumpDelays[i - 1].Delay;
				if (i < PumpDelays.Count - 1)
					nextDelay = PumpDelays[i + 1].Delay;

				if (prevDelay != null)
					currentDelay.InputGKBases.Add(prevDelay);
				if (nextDelay != null)
					currentDelay.OutputGKBases.Add(nextDelay);
			}

			foreach (var firePumpDevice in FirePumpDevices)
			{
				foreach (var otherFirePumpDevice in FirePumpDevices)
				{
					firePumpDevice.LinkGKBases(otherFirePumpDevice);
				}
			}

			foreach (var jockeyPumpDevice in JockeyPumpDevices)
			{
				foreach (var otherJockeyPumpDevice in JockeyPumpDevices)
				{
					jockeyPumpDevice.LinkGKBases(otherJockeyPumpDevice);
				}
			}
		}
	}

	class PumpDelay
	{
		public GKDelay Delay { get; set; }
		public GKDevice Device { get; set; }
	}
}